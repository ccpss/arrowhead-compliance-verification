#!/bin/sh
#
    # Test        : CUST-0160
    # Description : Search accounts with passwords
    Register --test-no CUST-0160 --weight L --network NO --category security --description "Search accounts with passwords"
    if [ ${SKIPTEST} -eq 0 ]; then
	LogText "Metric IAC.1: Human user identification and authentication: Human user can be identified and authenticated on all interfaces that allow human access"
        # LogText "Test: Verifying password secured accounts"
	FIND=$(passwd --all --status 2> /dev/null | ${AWKBINARY} '{ if ($2=="NP") print $1 }')
        if [ -z "${FIND}" ]; then
            LogText "Result IAC.1: all accounts seem to have a password - OK"
            Display --indent 2 --text "+ Verifying IAC.1 Human user identification and authentication: accounts without password" --result "${STATUS_OK}" --color GREEN
	    AddHP 1 1
        else
            LogText "Result IAC.1: found one or more accounts without password - WARNING"
            for I in ${FIND}; do
                LogText "Account without password: ${I}"
                Report "account_without_password=${I}"
            done
            Display --indent 2 --text "+ Verifying IAC.1 Human user identification and authentication: accounts without password" --result "${STATUS_WARNING}" --color RED
	    AddHP 0 1
            ReportWarning ${TEST_NO} "Found accounts without password"
        fi
    fi

    # Test        : CUST-0170
    # Description : Search for empty SSH password authentication in /etc/ssh/sshd_config
    Register --test-no CUST-0170 --weight L --network NO --category security --description "Search for empty SSH password authentication in /etc/ssh/sshd_config"
    if [ ${SKIPTEST} -eq 0 ]; then
	LogText "Metric IAC.1: Human user identification and authentication: Human user can be identified and authenticated on all interfaces that allow human access"
        # LogText "Test: Verifying empty SSH password authentication"
	FIND=$(${GREPBINARY} -v "^#" /etc/ssh/sshd_config | ${GREPBINARY} -i "permitemptypasswords" | ${AWKBINARY} '{ print tolower($2) }')
        if [ "${FIND}" = "yes" ]; then
            LogText "Result IAC.1: Empty password authentication for SSH is enabled - WARNING"
            Display --indent 2 --text "+ Verifying IAC.1 Human user identification and authentication: is empty password authentication for SSH enabled" --result "${STATUS_WARNING}" --color RED
	    AddHP 0 1
        else
            LogText "Result IAC.1: Empty password authentication for SSH is disabled - OK"
            Display --indent 2 --text "+ Verifying IAC.1 Human user identification and authentication: is empty password authentication for SSH enabled" --result "${STATUS_OK}" --color GREEN
	    AddHP 1 1
        fi
    fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
    # Test        : CUST-0180
    # Description : Check if top is installed
    Register --test-no CUST-0180 --weight L --network NO --category security --description "Check if top is installed"
    if [ ${SKIPTEST} -eq 0 ]; then
	LogText "Metric IAC.2: Software process and device identification and authentication: Software processes and devices can be identified and authenticated on all interfaces that allow access"	
        # LogText "Test: Verifying if top program is installed"
		if ! [ -x "$(command -v top)" ]; then
			LogText "Result IAC.2: top is not installed - NOT FOUND"
			Display --indent 2 --text "+ Verifying IAC.2 Software process and device identification and authentication: is top installed" --result "${STATUS_NOT_FOUND}" --color YELLOW
			AddHP 0 1
		else
			LogText "Result IAC.2: top is installed - OK"
			Display --indent 2 --text "+ Verifying IAC.2 Software process and device identification and authentication: is top installed" --result "${STATUS_OK}" --color GREEN
			AddHP 1 1
		fi
	fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
    # Test        : CUST-0030
    # Description : Check for /etc/passwd file
    Register --test-no CUST-0030 --weight L --network NO --category security --description "Check for /etc/passwd file"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric IAC.3: Account management: Accounts are managed by authorized users"
        # LogText "Test: Verifying if there is a /etc/passwd file"
        FileExists ${ROOTDIR}etc/passwd
        if [ ${FILE_FOUND} -eq 1 ]; then
                LogText "Result IAC.3: found /etc/passwd file - OK"
                Display --indent 2 --text "+ Verifying IAC.3 Account management: /etc/passwd file" --result "${STATUS_OK}" --color GREEN
                AddHP 1 1
        else
                LogText "Result IAC.3: no /etc/passwd file found - WARNING"
                Display --indent 2 --text "+ Verifying IAC.3 Account management: /etc/passwd file" --result "${STATUS_WARNING}" --color RED
                AddHP 0 1
        fi
    fi

    # Test        : CUST-0040
    # Description : Check for /etc/group file
    Register --test-no CUST-0040 --weight L --network NO --category security --description "Check for /etc/group file"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric IAC.3: Account management: Accounts are managed by authorized users"
        # LogText "Test: Verifying if there is a /etc/group file"
        FileExists ${ROOTDIR}etc/group
        if [ ${FILE_FOUND} -eq 1 ]; then
                LogText "Result IAC.3: found /etc/group file - OK"
                Display --indent 2 --text "+ Verifying IAC.3 Account management: /etc/group file" --result "${STATUS_OK}" --color GREEN
                AddHP 1 1
        else
                LogText "Result IAC.3: no /etc/group file found - WARNING"
                Display --indent 2 --text "+ Verifying IAC.3 Account management: /etc/group file" --result "${STATUS_WARNING}" --color RED
                AddHP 0 1
        fi
    fi

#
#--------------------------------------------------------------------------------------------------------------------------------------
#
	# Test        : CUST-0250
    # Description : Check for process IDs of running processes & services
    Register --test-no CUST-0250 --weight L --network NO --category security --description "Check for process IDs of running processes & services"
    if [ ${SKIPTEST} -eq 0 ]; then
	LogText "Metric IAC.4: Identifier management: Assuring there are identifiers managed for users, groups, roles or interfaces"
        # LogText "Test: Verifying process IDs of processes & services"
	FIND=$(${PSBINARY} -ef | ${AWKBINARY} '{print $2}')
        if [ "${FIND}" != "" ]; then
        	LogText "Result IAC.4: Processes & services have a process ID - OK"
		Display --indent 2 --text "+ Verifying IAC.4 Identifier management: every process & service has a process ID" --result "${STATUS_OK}" --color GREEN
		AddHP 1 1
	else
		LogText "Result IAC.4: Processes & services don't have a process ID - WARNING"
		Display --indent 2 --text "+ Verifying IAC.4 Identifier management: every process & service has a process ID" --result "${STATUS_WARNING}" --color YELLOW
		AddHP 0 1
	fi
	fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
    # Test        : CUST-0210
    # Description : Check for /etc/shadow file for authenticator management
    Register --test-no CUST-0210 --weight L --network NO --category security --description "Check for /etc/shadow file for authenticator management"
    if [ ${SKIPTEST} -eq 0 ]; then
	LogText "Metric IAC.5: Authenticator management: available authenticators can be managed"
        # LogText "Test: Verifying if there is a /etc/shadow file"
        FileExists ${ROOTDIR}etc/shadow
        if [ ${FILE_FOUND} -eq 1 ]; then
        	LogText "Result IAC.5: found /etc/shadow file - OK"
		Display --indent 2 --text "+ Verifying IAC.5 Authenticator management: /etc/shadow file" --result "${STATUS_OK}" --color GREEN
		AddHP 1 1
	else
		LogText "Result IAC.5: no /etc/shadow file found - WARNING"
		Display --indent 2 --text "+ Verifying IAC.5 Authenticator management: /etc/shadow file" --result "${STATUS_WARNING}" --color RED
		AddHP 0 1
        fi
    fi

    # Test        : CUST-0220
    # Description : Check for SSH key authentication management file
    Register --test-no CUST-0220 --weight L --network NO --category security --description "Check for SSH key authentication management file"
    if [ ${SKIPTEST} -eq 0 ]; then
	LogText "Metric IAC.5: Authenticator management: available authenticators can be managed"
        # LogText "Test: Verifying SSH key authentication management file"
        FIND=$(${GREPBINARY} -v "^#" /etc/ssh/sshd_config | ${GREPBINARY} "AuthorizedKeysFile")
        if [ "${FIND}" != "" ]; then
        	LogText "Result IAC.5: Management file for SSH key authentication found - OK"
                Display --indent 2 --text "+ Verifying IAC.5 Authenticator management: SSH key authentication management file" --result "${STATUS_OK}" --color GREEN
		AddHP 1 1
        else
        	LogText "Result IAC.5: Management file for SSH key authentication not found - WARNING"
        	Display --indent 2 --text "+ Verifying IAC.5 Authenticator management: SSH key authentication management file" --result "${STATUS_WARNING}" --color YELLOW
		AddHP 0 1
        fi
     fi
#
#--------------------------------------------------------------------------------------------------------------------------------------
#
    # Test        : CUST-0230
    # Description : Check a passphrase is set in the wpa_supplicant file for wireless authentication
    Register --test-no CUST-0230 --weight L --network NO --category security --description "Check a passphrase is set in the wpa_supplicant file for wireless authentication"
    if [ ${SKIPTEST} -eq 0 ]; then
	LogText "Metric IAC.6: Wireless access management: human, software process or device users can be identified and authenticated for wireless communication"
        # LogText "Test: Verifying WiFi authentication"
	FIND=$(${GREPBINARY} -v "^#" /etc/wpa_supplicant/wpa_supplicant.conf | ${GREPBINARY} "psk=" | ${AWKBINARY} -F= '{ print $2 }')
	if [ "${FIND}" != "" ]; then
		LogText "Result IAC.6: A passphrase is set in the wpa_supplicant file - OK"
		Display --indent 2 --text "+ Verifying IAC.6 Wireless access management: there is a passphrase set in the wpa_supplicant file" --result "${STATUS_OK}" --color GREEN
		AddHP 1 1
	else
		LogText "Result IAC.6: No passphrase is set in the wpa_supplicant file - NOT FOUND"
		Display --indent 2 --text "+ Verifying IAC.6 Wireless access management: there is a passphrase set in the wpa_supplicant file" --result "${STATUS_NOT_FOUND}" --color YELLOW
		AddHP 0 1
	fi
    fi

    # Test        : CUST-0240
    # Description : Check if there is a /etc/default/bluetooth file for Bluetooth authentication
    Register --test-no CUST-0240 --weight L --network NO --category security --description "Check if there is a /etc/default/bluetooth file for Bluetooth authentication"
    if [ ${SKIPTEST} -eq 0 ]; then
	LogText "Metric IAC.6: Wireless access management: human, software process or device users can be identified and authenticated for wireless communication"
	# LogText "Test: Verifying Bluetooth authentication"
        if [ -f "/etc/default/bluetooth" ]; then
		LogText "Result IAC.6: there is a /etc/default/bluetooth file for Bluetooth authentication - OK"
		Display --indent 2 --text "+ Verifying IAC.6 Wireless access management: there is a /etc/default/bluetooth file for Bluetooth authentication" --result "${STATUS_OK}" --color GREEN
		AddHP 1 1
	else
		LogText "Result IAC.6: there is no /etc/default/bluetoothfile for Bluetooth authentication - WARNING"
		Display --indent 2 --text "+ Verifying IAC.6 Wireless access management: there is a /etc/default/bluetooth file for Bluetooth authentication" --result "${STATUS_WARNING}" --color YELLOW
		AddHP 0 1
	fi
    fi
#
#--------------------------------------------------------------------------------------------------------------------------------------
#
    # Test        : CUST-0090
    # Description : Check if there is a minimum password length set in the PAM
    Register --test-no CUST-0090 --weight L --network NO --category security --description "Check for a minimum password length set in the PAM"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric IAC.7: Strength of password-based authentication: password strength is enforced with minimum length and character type variety"
        # LogText "Test: Verifying minimum password length"
        if [ -f "/etc/pam.d/common-password" ]; then 
                FIND=$(${GREPBINARY} -i minlen /etc/pam.d/common-password)
                FIND2=$(${GREPBINARY} -i ocredit /etc/pam.d/common-password)
                if [ "$FIND" != "" ]; then
                        LogText "Result IAC.7: Minimum password length set - OK"
                        Display --indent 2 --text "+ Verifying IAC.7 Strength of password-based authentication: there is a minimum password length set" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                else
                        LogText "Result IAC.7: No minimum password length set - NOT FOUND"
                        Display --indent 2 --text "+ Verifying IAC.7 Strength of password-based authentication: there is a minimum password length set" --result "${STATUS_NOT_FOUND}" --color YELLOW
                        AddHP 0 1
                fi
        else
                LogText "Result IAC.7: No PAM file for minimum password length configuration found - NOT FOUND"
                Display --indent 2 --text "+ Verifying IAC.7 Strength of password-based authentication: there is a minimum password length set" --result "${STATUS_NOT_FOUND}" --color YELLOW
                AddHP 0 1
        fi
    fi

        # Description : Check if there is password rotation enabled
        FIND=$(${AWKBINARY} -F: '{if ($2 !~ /^\!/ && $2 !~ /^\*/) print $5}' /etc/shadow | ${GREPBINARY} 99999)
        if [ "$FIND" != "" ]; then
                LogText "Result IAC.7: One or multiple accounts with no password rotation enabled - NOT FOUND"
                Display --indent 2 --text "+ Verifying IAC.7 Strength of password-based authentication: there is password rotation enabled" --result "${STATUS_NOT_FOUND}" --color YELLOW
                AddHP 0 1
                else
                        LogText "Result IAC.7: All accounts have password rotation enabled - OK"
                        Display --indent 2 --text "+ Verifying IAC.7 Strength of password-based authentication: there is password rotation enabled" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
        fi

#
#---------------------------------------------------------------------------------------------------------------------------------------
#
    # Test        : CUST-0100
    # Description : Check if openssl is installed
    Register --test-no CUST-0100 --weight L --network NO --category security --description "Check if openssl is installed"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric IAC.8: Public key infrastructure (PKI) certificates: a public key infrastructure (PKI) can be operated or that PKI certificates can be accessed from a PKI"
        LogText "Metric IAC.9: Strength of public key authentication: certificates can be validated by checking the validity, revocation status and certification path to a certification authority"
        # LogText "Test: Verifying if openssl program is installed"
        if ! [ -x "$(command -v openssl)" ]; then
                LogText "Result IAC.8 / IAC.9: openssl is not installed - NOT FOUND"
                Display --indent 2 --text "+ Verifying IAC.8 / IAC.9: there is openssl installed" --result "${STATUS_NOT_FOUND}" --color YELLOW
                AddHP 0 1
        else
                LogText "Result IAC.8 / IAC.9: openssl is installed - OK"
                Display --indent 2 --text "+ Verifying IAC.8 / IAC.9: there is openssl installed" --result "${STATUS_OK}" --color GREEN
                AddHP 1 1
        fi
    fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
    # Test        : CUST-0110
    # Description : Verifying if pwfeedback is disabled for /etc/sudoers file for password obscuring
    Register --test-no CUST-0110 --weight L --network NO --category security --description "Check for disabled pwfeedback in /etc/sudoers file"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric IAC.10: Authenticator feedback: feedback of authentication details can be obscured while a user authenticates himself"
        # LogText "Test: Verifying disabled pwfeedback"
        FIND=$(${GREPBINARY} -v "^#" /etc/sudoers | ${GREPBINARY} "pwfeedback" | ${GREPBINARY} -v "!pwfeedback" )
        if [ "${FIND}" != "" ]; then 
                LogText "Result IAC.10: Password feedback is enabled for sudo actions in the sudoers file - WARNING"
                Display --indent 2 --text "+ Verifying IAC.10 Authenticator feedback: password feedback is disabled for sudo actions" --result "${STATUS_WARNING}" --color YELLOW
                AddHP 0 1
        else
                LogText "Result IAC.10: Password feedback is disabled for sudo actions in the sudoers file - OK"
                Display --indent 2 --text "+ Verifying IAC.10 Authenticator feedback: password feedback is disabled for sudo actions" --result "${STATUS_OK}" --color GREEN
                AddHP 1 1
        fi
    fi


    # Test        : CUST-0120
    # Description : Search for disabled SSH password authentication in /etc/ssh/sshd_config
    Register --test-no CUST-0120 --weight L --network NO --category security --description "Verifying disabled SSH password authentication in /etc/ssh/sshd_config"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric IAC.10: Authenticator feedback: feedback of authentication details can be obscured while a user authenticates himself"
        # LogText "Test: Verifying disabled SSH password authentication"
        FIND=$(${GREPBINARY} -v "^#" /etc/ssh/sshd_config | ${GREPBINARY} -i "passwordauthentication" | ${AWKBINARY} '{ print tolower($2) }')
        if [ "${FIND}" = "yes" ]; then
            LogText "Result IAC.10: SSH password authentication is enabled - WARNING"
            Display --indent 2 --text "+ Verifying IAC.10 Authenticator feedback: SSH password authentication is disabled" --result "${STATUS_WARNING}" --color RED
            AddHP 0 1
        else
            LogText "Result IAC.10: SSH password authentication is disabled - OK"
            Display --indent 2 --text "+ Verifying IAC.10 Authenticator feedback: SSH password authentication is disabled" --result "${STATUS_OK}" --color GREEN
            AddHP 1 1
        fi
    fi

#
#---------------------------------------------------------------------------------------------------------------------------------------
#
    # Test        : CUST-0130
    # Description : Check if there is a lockout policy set in the PAM for failed login attempts
    Register --test-no CUST-0130 --weight L --network NO --category security --description "Check for a lockout policy set in the PAM"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric IAC.11: Unsuccessful login attempts: a limit of consecutive unsuccessful login attempts by users for a specific time period can be enforced"
        # LogText "Test: Verifying PAM lockout policy"
        if [ -f "/etc/pam.d/common-password" ]; then 
                FIND=$(${GREPBINARY} -i deny /etc/pam.d/common-password)
                if [ "$FIND" != "" ]; then 
                        LogText "Result IAC.11: PAM lockout policy set - OK"
                        Display --indent 2 --text "+ Verifying IAC.11 Unsuccessful login attempts: there is a a lockout policy set" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                        else
                                LogText "Result IAC.11: No PAM lockout policy set - NOT FOUND"
                                Display --indent 2 --text "+ Verifying IAC.11 Unsuccessful login attempts: there is a a lockout policy set" --result "${STATUS_NOT_FOUND}" --color YELLOW
                                AddHP 0 1
                fi
                else
                        LogText "Result IAC.11: No PAM file for lockout policy configuration found - NOT FOUND"
                        Display --indent 2 --text "+ Verifying IAC.11 Unsuccessful login attempts: there is a a lockout policy set" --result "${STATUS_NOT_FOUND}" --color YELLOW
                        AddHP 0 1
                fi
        fi

#
#---------------------------------------------------------------------------------------------------------------------------------------
#
  # Test        : CUST-0140
    # Description : Check if there is a /etc/motd file for system use notification
    Register --test-no CUST-0140 --os Linux --weight L --network NO --category security --description "Verifying for /etc/motd file"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric IAC.12: System use notification: a system use notification message, which is managed by authorized users, can be displayed before the authentication process"   
        if [ -f "/etc/motd" ]; then
                LogText "Result IAC.12: there is a /etc/motd file for system use notification - OK"
                Display --indent 2 --text "+ Verifying IAC.12 System use notification: there is a /etc/motd file for system use notification" --result "${STATUS_OK}" --color GREEN
                AddHP 1 1
        else
                LogText "Result IAC.12: there is no /etc/motd file for system use notification - WARNING"
                Display --indent 2 --text "+ Verifying IAC.12 System use notification: there is a /etc/motd file for system use notification" --result "${STATUS_WARNING}" --color YELLOW
                AddHP 0 1
        fi
    fi

#
#---------------------------------------------------------------------------------------------------------------------------------------
#
    # Test        : CUST-0150
    # Description : Check iptables kernel module
    Register --test-no CUST-0150 --os Linux --weight L --network NO --category security --description "Check iptables kernel module"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric IAC.13: Access via untrusted networks: all access through untrusted networks can be managed and monitored"
        FIND=$(${LSMODBINARY} | ${AWKBINARY} '{ print $1 }' | ${GREPBINARY} "^ip*_tables")
        if [ ! -z "${FIND}" ]; then
            FIREWALL_ACTIVE=1
            IPTABLES_ACTIVE=1
            IPTABLES_MODULE_ACTIVE=1
            LogText "Result IAC.13: Found iptables in loaded kernel modules - FOUND"
            Display --indent 2 --text "+ Verifying IAC.13 Access via untrusted networks: iptables kernel module" --result "${STATUS_FOUND}" --color GREEN
            AddHP 1 1
            Report "firewall_software[]=iptables"
            for I in ${FIND}; do
                if [ "${I}" = "ip6_tables" ]; then IP6TABLES_ACTIVE=1; Report "firewall_software[]=ip6tables"; fi
                LogText "Found module: ${I}"
            done
        elif [ -f ${ROOTDIR}proc/net/ip_tables_names ]; then
            FIREWALL_ACTIVE=1
            Report "firewall_software[]=iptables"
            IPTABLES_ACTIVE=1
            LogText "Result IAC.13: iptables support - FOUND"
            Display --indent 2 --text "+ Verifying IAC.13 Access via untrusted networks: iptables support" --result "${STATUS_FOUND}" --color GREEN
            AddHP 1 1
        elif [ -f ${ROOTDIR}proc/net/ip6_tables_names ]; then
            FIREWALL_ACTIVE=1
            IP6TABLES_ACTIVE=1
            Report "firewall_software[]=ip6tables"
            LogText "Result IAC.13: ip6tables support - FOUND"
            Display --indent 2 --text "+ Verifying IAC.13 Access via untrusted networks: ip6tables support" --result "${STATUS_FOUND}" --color GREEN
            AddHP 1 1
        else
                LogText "Result IAC.13: iptables kernel module - NOT FOUND"
                Display --indent 2 --text "+ Verifying IAC.13 Access via untrusted networks: iptables kernel module" --result "${STATUS_NOT_FOUND}" --color WHITE
                AddHP 0 1
        fi
    fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
    # Test        : CUST-0260
    # Description : Verifying if TLS is supported for in transit protection and cryptsetup for at rest protection
    # REQ=$(${NETSTATBINARY} -ptnl | ${GREPBINARY} ":443" )
    #if [ "${REQ}" != "" ]; then PREQS_MET="YES"; else PREQS_MET="NO"; fi
    Register --test-no CUST-0260 --weight L --network NO --category security --description "Verifying for TLS and AES encryption"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric DC.1: Information confidentiality: the confidentiality of information with read permission can be protected during transmission and at rest"
        # LogText "Test: Verifying support for TLS and cryptsetup"
        FIND=$(timeout 2s ${OPENSSLBINARY} s_client -tls1 -connect example.com:443 2>/dev/null | ${GREPBINARY} -i "server certificate")
        if [ "${FIND}" != "" ]; then
                LogText "Result DC.1: TLS is supported by the host for in transit protection - OK"
                Display --indent 2 --text "+ Verifying DC.1: Information confidentiality: TLS is supported" --result "${STATUS_OK}" --color GREEN
                AddHP 1 1
        else
                LogText "Result DC.1: TLS is not supported by the host for in transit protection - WARNING"
                Display --indent 2 --text "+ Verifying DC.1: Information confidentiality: SSL v3 is supported" --result "${STATUS_WARNING}" --color RED
                AddHP 0 1
        fi

        if ! [ -x "$(command -v cryptsetup)" ]; then 
                LogText "Result DC.1: cryptsetup is not installed for at rest protection - NOT FOUND"
                Display --indent 2 --text "+ Verifying DC.1: Information confidentiality: cryptsetup installed for at rest protection" --result "${STATUS_NOT_FOUND}" --color YELLOW
                AddHP 0 1
        else
                LogText "Result DC.1: cryptsetup is installed for at rest protection - OK"
                Display --indent 2 --text "+ Verifying DC.1: Information confidentiality: cryptsetup installed for at rest protection" --result "${STATUS_OK}" --color GREEN
                AddHP 1 1
        fi
    fi

#
#---------------------------------------------------------------------------------------------------------------------------------------
#
# Test        : CUST-0270
    # Description : Verifying if shred or wipe program is installed for purging data of device
    Register --test-no CUST-0270 --weight L --network NO --category security --description "Verifying for shred or wipe program installed"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric DC.2: Information persistence: the purging of information with read permission can happen when components are no longer in use"             
        # LogText "Test: Verifying for shred or shred program"
                if [ -x "$(command -v shred)" ]; then
                        LogText "Result DC.2: shred is installed for information purging - OK"
                        Display --indent 2 --text "+ Verifying DC.2 Information persistence: there is shred for information purging" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                elif [ -x "$(command -v wipe)" ]; then
                        LogText "Result DC.2: wipe is installed for information purging - OK"
                        Display --indent 2 --text "+ Verifying DC.2 Information persistence: there is wipe for information purging" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                else
                        LogText "Result DC.2: shred or wipe are not installed for information purging - NOT FOUND"
                        Display --indent 2 --text "+ Verifying DC.2 Information persistence: there is wipe or shred installed for information purging" --result "${STATUS_NOT_FOUND}" --color YELLOW
                        AddHP 0 1
                fi
        fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
    # Test        : CUST-0280
    # Description : Verifying if AES, RSA or 3DES algorithm is supported for use of cryptography
    Register --test-no CUST-0280 --weight L --network NO --category security --description "Verifying for AES, RSA or 3DES algorithm support"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric DC.3: Use of cryptography: cryptographic algorithms, key sizes and mechanisms for managing keys are used according to industry’s best practices, where it is required"
        # LogText "Test: Verifying for openssl"
                if ! [ -x "$(command -v openssl)" ]; then
                        LogText "Result DC.3: openssl is not installed for AES or RSA encryption - NOT FOUND"
                        Display --indent 2 --text "+ Verifying DC.3 Use of cryptography: there is openssl for AES encryption" --result "${STATUS_NOT_FOUND}" --color YELLOW
                        AddHP 0 1
                else
                        LogText "Result DC.3: openssl is installed for AES or RSA encryption - OK"
                        Display --indent 2 --text "+ Verifying DC.3 Use of cryptography: there is openssl installed for AES encryption" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                fi
        fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
 # Test        : CUST-0290
    # Description : Verifying if there are adequate kernel settings against DoS attacks configured in /etc/sysctl.conf
    Register --test-no CUST-0290 --weight L --network NO --category security --description "Verifying for adequate kernel settings in /etc/sysctl.conf"
    if [ ${SKIPTEST} -eq 0 ]; then 
        LogText "Metric RA.1: Denial of service protection: the system can still operate in a derogated condition in case of a DoS attack" 
        # LogText "Test: Verifying kernel settings"
                FIND=$(${GREPBINARY} -i  "^net.ipv4.tcp_window_scaling" /etc/sysctl.conf | ${TRBINARY} -d ' ' | ${AWKBINARY} -F '=' '$2 ~ /^[0-9]+$/ {print $2}')
                FIND2=$(${GREPBINARY} -i  "^net.ipv4.tcp_sack" /etc/sysctl.conf | ${TRBINARY} -d ' ' | ${AWKBINARY} -F '=' '$2 ~ /^[0-9]+$/ {print $2}')
                FIND3=$(${GREPBINARY} -i  "^net.ipv4.tcp_syncookies" /etc/sysctl.conf | ${TRBINARY} -d ' ' | ${AWKBINARY} -F '=' '$2 ~ /^[0-9]+$/ {print $2}')
                FIND4=$(${GREPBINARY} -i  "^net.ipv4.tcp_timestamps" /etc/sysctl.conf | ${TRBINARY} -d ' ' | ${AWKBINARY} -F '=' '$2 ~ /^[0-9]+$/ {print $2}')
                FIND5=$(${GREPBINARY} -i  "^net.ipv4.conf.all.rp_filter" /etc/sysctl.conf | ${TRBINARY} -d ' ' | ${AWKBINARY} -F '=' '$2 ~ /^[0-9]+$/ {print $2}')
                FIND6=$(${GREPBINARY} -i  "^net.ipv4.tcp_synack_retries" /etc/sysctl.conf | ${TRBINARY} -d ' ' | ${AWKBINARY} -F '=' '$2 ~ /^[0-9]+$/ {print $2}')
                FIND7=$(${GREPBINARY} -i  "^net.netfilter.nf_conntrack_tcp_timeout_syn_recv" /etc/sysctl.conf | ${TRBINARY} -d ' ' | ${AWKBINARY} -F '=' '$2 ~ /^[0-9]+$/ {print $2}')
                FIND8=$(${GREPBINARY} -i  "^net.ipv4.tcp_max_tw_buckets" /etc/sysctl.conf | ${TRBINARY} -d ' ' | ${AWKBINARY} -F '=' '$2 ~ /^[0-9]+$/ {print $2}')
                FIND9=$(${GREPBINARY} -i  "^net.netfilter.nf_conntrack_tcp_loose" /etc/sysctl.conf | ${TRBINARY} -d ' ' | ${AWKBINARY} -F '=' '$2 ~ /^[0-9]+$/ {print $2}')
                FIND10=$(${GREPBINARY} -i  "^net.ipv4.tcp_max_syn_backlog" /etc/sysctl.conf | ${TRBINARY} -d ' ' | ${AWKBINARY} -F '=' '$2 ~ /^[0-9]+$/ {print $2}')
                FIND11=$(${GREPBINARY} -i  "^net.ipv4.tcp_max_orphans" /etc/sysctl.conf | ${TRBINARY} -d ' ' | ${AWKBINARY} -F '=' '$2 ~ /^[0-9]+$/ {print $2}')
                FIND12=$(${GREPBINARY} -i  "^net.ipv4.tcp_fin_timeout" /etc/sysctl.conf | ${TRBINARY} -d ' ' | ${AWKBINARY} -F '=' '$2 ~ /^[0-9]+$/ {print $2}')
                if [ "${FIND}" = 0 ]; then 
                        LogText "Result RA.1: Window scaling for TCP windows is disabled - OK"
                        Display --indent 2 --text "+ Verifying RA.1 Denial of service protection: window scaling for TCP windows is disabled" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                else
                        LogText "Result RA.1: Window scaling for TCP windows is enabled - WARNING"
                        Display --indent 2 --text "+ Verifying RA.1 Denial of service protection: window scaling for TCP windows is disabled" --result "${STATUS_WARNING}" --color YELLOW
                        AddHP 0 1
                fi
                if [ "${FIND2}" = 0 ]; then 
                        LogText "Result RA.1: TCP selective acks are disabled - OK"
                        Display --indent 2 --text "+ Verifying RA.1 Denial of service protection: TCP selective acks are disabled" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                else
                        LogText "Result RA.1: TCP selective acks are enabled - WARNING"
                        Display --indent 2 --text "+ Verifying RA.1 Denial of service protection: TCP selective acks are disabled" --result "${STATUS_WARNING}" --color YELLOW
                        AddHP 0 1
                fi
                if [ "${FIND3}" = 1 ]; then 
                        LogText "Result RA.1: Source address verification is enabled - OK"
                        Display --indent 2 --text "+ Verifying RA.1 Denial of service protection: source address verification is enabled" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
		else
                        LogText "Result RA.1: Source address verification is disabled - WARNING"
                        Display --indent 2 --text "+ Verifying RA.1 Denial of service protection: source address verification is enabled" --result "${STATUS_WARNING}" --color YELLOW
                        AddHP 0 1
                fi
                if [ "${FIND4}" = 1 ]; then
                        LogText "Result RA.1: TCP SYN cookie protection is enabled - OK"
                        Display --indent 2 --text "+ Verifying RA.1 Denial of service protection: TCP SYN cookie protection is enabled" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                else
                        LogText "Result RA.1: TCP SYN cookie protection is disabled - WARNING"
                        Display --indent 2 --text "+ Verifying RA.1 Denial of service protection: TCP SYN cookie protection is enabled" --result "${STATUS_WARNING}" --color YELLOW
                        AddHP 0 1
                fi
                if [ "${FIND5}" = 0 ]; then
                        LogText "Result RA.1: TCP timestamps are disabled - OK"
                        Display --indent 2 --text "+ Verifying RA.1 Denial of service protection: source address verification is disabled" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                else
                        LogText "Result RA.1: TCP timestamps are enabled - WARNING"
                        Display --indent 2 --text "+ Verifying RA.1 Denial of service protection: source address verification is disabled" --result "${STATUS_WARNING}" --color YELLOW
                        AddHP 0 1
                fi
                if [ "${FIND6}" != "" ]; then
                        LogText "Result RA.1: The number of times of SYNACKs for passive TCP connections are set - OK"
                        Display --indent 2 --text "+ Verifying RA.1 Denial of service protection: the number of times of SYNACKs for passive TCP connections are set" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                else
                        LogText "Result RA.1: The number of times of SYNACKs for passive TCP connections are set too high (more than 3) - WARNING"
                        Display --indent 2 --text "+ Verifying RA.1 Denial of service protection: the number of times of SYNACKs for passive TCP connections are set to 3 or less" --result "${STATUS_WARNING}" --color YELLOW
                        AddHP 0 1
                fi
                if [ "${FIND7}" != "" ]; then
                        LogText "Result RA.1: Timeout value for SYN_RECV is configured - OK"
                        Display --indent 2 --text "+ Verifying RA.1 Denial of service protection: there is a timeout value configured for SYN_RECV" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
		else
                        LogText "Result RA.1: Timeout value for SYN_RECV is not configured - WARNING"
                        Display --indent 2 --text "+ Verifying RA.1 Denial of service protection: there is a timeout value configured for SYN_RECV" --result "${STATUS_WARNING}" --color YELLOW
                        AddHP 0 1
                fi
                if [ "${FIND8}" != "" ]; then
                        LogText "Result RA.1: The tcp-time-wait buckets pool size is confiured - OK"
                        Display --indent 2 --text "+ Verifying RA.1 Denial of service protection: the tcp-time-wait buckets pool size is configured" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                else
                        LogText "Result RA.1: The tcp-time-wait buckets pool size is not configured - WARNING"
                        Display --indent 2 --text "+ Verifying RA.1 Denial of service protection: the tcp-time-wait buckets pool size is configured" --result "${STATUS_WARNING}" --color YELLOW
                        AddHP 0 1
                fi
                if [ "${FIND9}" = 0 ]; then
                        LogText "Result RA.1: The picking up of already established connections is disabled - OK"
                        Display --indent 2 --text "+ Verifying RA.1 Denial of service protection: the picking up of already established connections is disabled" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                else
                        LogText "Result RA.1: The picking up of already established connections is enabled - WARNING"
                        Display --indent 2 --text "+ Verifying RA.1 Denial of service protection: the picking up of already established connections is disabled" --result "${STATUS_WARNING}" --color YELLOW
                        AddHP 0 1
                fi
                if [ "${FIND10}" != "" ]; then
                        LogText "Result RA.1: The backlog queue size of connections is configured - OK"
                        Display --indent 2 --text "+ Verifying RA.1 Denial of service protection: the backlog queue size of connections is configured" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                else
                        LogText "Result RA.1: The backlog queue size of connections is not configured - WARNING"
                        Display --indent 2 --text "+ Verifying RA.1 Denial of service protection: the backlog queue size of connections is configured" --result "${STATUS_WARNING}" --color YELLOW
                        AddHP 0 1
                fi
                if [ "${FIND11}" != "" ]; then
                        LogText "Result RA.1: The maximal number of TCP sockets not attached to any user file handle is configured - OK"
                        Display --indent 2 --text "+ Verifying RA.1 Denial of service protection: the maximal number of TCP sockets not attached to any user file handle is configured" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
		else
                        LogText "Result RA.1: The maximal number of TCP sockets not attached to any user file handle is not configured - WARNING"
                        Display --indent 2 --text "+ Verifying RA.1 Denial of service protection: the maximal number of TCP sockets not attached to any user file handle is configured" --result "${STATUS_WARNING}" --color YELLOW
                        AddHP 0 1
                fi
                if [ "${FIND12}" != "" ]; then
                        LogText "Result RA.1: The time to wait for a final FIN packet before the socket is closed is configured - OK"
                        Display --indent 2 --text "+ Verifying RA.1 Denial of service protection: the time to wait for a final FIN packet before the socket is closed is configured" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                else
                        LogText "Result RA.1: The time to wait for a final FIN packet before the socket is closed is not configured - WARNING"
                        Display --indent 2 --text "+ Verifying RA.1 Denial of service protection: the time to wait for a final FIN packet before the socket is closed is configured" --result "${STATUS_WARNING}" --color YELLOW
                        AddHP 0 1
                fi
        fi

#
#---------------------------------------------------------------------------------------------------------------------------------------
#
    # Test        : CUST-0300
    # Description : Verifying if there is tc installed for traffic rate limiting and nice for priority scheming
    Register --test-no CUST-0300 --weight L --network NO --category security --description "Verifying for tc and nice package"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric RA.2: Resource management: resources can be limited for security measures in order to circumvent resource overconsumption"
        # LogText "Test: Verifying tc and nice package"
                if ! [ -x "$(command -v tc)" ]; then
                        LogText "Result RA.2: tc is not installed for traffic rate limiting - NOT FOUND"
                        Display --indent 2 --text "+ Verifying RA.2 Resource management: there is tc for traffic rate limiting" --result "${STATUS_NOT_FOUND}" --color YELLOW
                        AddHP 0 1
                else
                        LogText "Result RA.2: tc is installed for traffic rate limiting - OK"
                        Display --indent 2 --text "+ Verifying RA.2 Resource management:there is tc installed for traffic rate limiting" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                fi

                if ! [ -x "$(command -v nice)" ]; then
                        LogText "Result RA.2: nice is not installed for priority scheming - NOT FOUND"
                        Display --indent 2 --text "+ Verifying RA.2 Resource management: there is nice for priority scheming" --result "${STATUS_NOT_FOUND}" --color YELLOW
                        AddHP 0 1
                else
                        LogText "Result RA.2: nice is installed for priority scheming - OK"
                        Display --indent 2 --text "+ Verifying RA.2 Resource management: there is nice installed for priority scheming" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                fi
        fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
    # Test        : CUST-0320
    # Description : Verifying if there is rsync installed for system backups
    Register --test-no CUST-0320 --weight L --network NO --category security --description "Verifying for rsync package"
    if [ ${SKIPTEST} -eq 0 ]; then
	LogText "Metric RA.3: Control system backup: system and user data can be backed up without hindering operation of the system"
        # LogText "Test: Verifying rsync"
		if ! [ -x "$(command -v rsync)" ]; then
			LogText "Result RA.3: rsync is not installed for system backups - NOT FOUND"
			Display --indent 2 --text "+ Verifying RA.3 Control system backup: there is rsync installed for system backups" --result "${STATUS_NOT_FOUND}" --color YELLOW
			AddHP 1 1
		else
			LogText "Result RA.3: rsync is installed for system backups - OK"
			Display --indent 2 --text "+ Verifying RA.3 Control system backup: there is rsync installed for system backups" --result "${STATUS_OK}" --color GREEN
			AddHP 1 1
		fi
	fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
	# Test        : CUST-0330
    # Description : Verifying if there is rear installed and configured for system recovery and reconstitution
    Register --test-no CUST-0330 --weight L --network NO --category security --description "Verifying for rear package and conf file"
    if [ ${SKIPTEST} -eq 0 ]; then
	LogText "Metric RA.4: Control system recovery and reconstitution: the system can recover and reconstitute itself to a configured save condition in case of a failure or outage"
        # LogText "Test: Verifying rear"
		if ! [ -x "$(command -v rear)" ]; then
			LogText "Result RA.4: rear is not installed for system recovery and reconstitution - NO FOUND"
			Display --indent 2 --text "+ Verifying RA.4 Control system recovery and reconstitution: there is rear for system recovery and reconstitution" --result "${STATUS_NOT_FOUND}" --color YELLOW
			AddHP 0 1
		else
			LogText "Result RA.4: rear is installed for system recovery and reconstitution - OK"
			Display --indent 2 --text "Verifying RA.4 Control system recovery and reconstitution: there is rear for system recovery and reconstitution" --result "${STATUS_OK}" --color GREEN
			FIND=$(${GREPBINARY} -i  backup /etc/rear/local.conf)
			FIND2=$(${GREPBINARY} -i  output /etc/rear/local.conf)
			FIND3=$(${GREPBINARY} -i  backup_url /etc/rear/local.conf)
			FIND4=$(${GREPBINARY} -i  output_url /etc/rear/local.conf)
			if [ "${FIND}" != "" && "${FIND2}" != "" && "${FIND3}" != "" && "${FIND4}" != ""]; then
				LogText "Result RA.4: rear is configured sufficiently in /etc/rear/local.conf for system recovery and reconstitution - OK"
				Display --indent 2 --text "+ Verifying RA.4 Control system recovery and reconstitution: rear is configured sufficiently in /etc/rear/local.conf" --result "${STATUS_OK}" --color GREEN
				AddHP 1 1
			else
				LogText "Result RA.4: rear needs more configuration in /etc/rear/local.conf for system recovery and reconstitution - NOT FOUND"
				Display --indent 2 --text "+ Verifying RA.4 Control system recovery and reconstitution: rear is configured sufficiently in /etc/rear/local.conf" --result "${STATUS_NOT_FOUND}" --color YELLOW
				AddHP 0 1
			fi
		fi
	fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
   # Test        : CUST-0340
    # Description : Verifying if there is apcupsd installed and configured for emergency power
    Register --test-no CUST-0340 --weight L --network NO --category security --description "Verifying for apcupsd package"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric RA.5: Emergency power: the system can switch between normal and emergency power while keeping up the present security status or derogated condition"
        # LogText "Test: Verifying apcupsd package"
        if ! [ -x "$(command -v apcupsd)" ]; then
                LogText "Result RA.5: apcupsd is not installed for emergency power - NOT FOUND"
                Display --indent 2 --text "+ Verifying RA.5 Emergency power: there is apcupsd for emergency power" --result "${STATUS_NOT_FOUND}" --color YELLOW
                AddHP 0 1
        else
                LogText "Result RA.5: apcupsd is installed for emergency power - OK"
                Display --indent 2 --text "+ Verifying RA.5 Emergency power: there is apcupsd installed for emergency power" --result "${STATUS_OK}" --color GREEN
                AddHP 1 1
                LogText "Test: Verifying APC UPS configuration"
                FIND=$(${GREPBINARY} -v "^#" /etc/apcupsd/apcupsd.conf | ${GREPBINARY} -i UPSNAME)
                FIND2=$(${GREPBINARY} -v "^#" /etc/apcupsd/apcupsd.conf | ${GREPBINARY} -i UPSCABLE)
                FIND3=$(${GREPBINARY} -v "^#" /etc/apcupsd/apcupsd.conf | ${GREPBINARY} -i UPSTYPE)
                FIND4=$(${GREPBINARY} -v "^#" /etc/apcupsd/apcupsd.conf | ${GREPBINARY} -i DEVICE)
                FIND5=$(${GREPBINARY} -v "^#" /etc/apcupsd/apcupsd.conf | ${GREPBINARY} -i ONBATTERYDELAY)
                FIND6=$(${GREPBINARY} -v "^#" /etc/apcupsd/apcupsd.conf | ${GREPBINARY} -i BATTERYLEVEL)
                FIND7=$(${GREPBINARY} -v "^#" /etc/apcupsd/apcupsd.conf | ${GREPBINARY} -i MINUTES)
                FIND8=$(${GREPBINARY} -v "^#" /etc/default/apcupsd | ${GREPBINARY} -i "ISCONFIGURED=yes")
        if [ "${FIND}" != "" ]; then
            LogText "Result RA.5: UPSNAME is configured - OK"
            Display --indent 2 --text "+ Verifying RA.5 Emergency power: UPSNAME is configured" --result "${STATUS_OK}" --color GREEN
            AddHP 1 1
        else
            LogText "Result RA.5: UPSNAME is not configured - NOT FOUND"
            Display --indent 2 --text "+ Verifying RA.5 Emergency power: UPSNAME is configured" --result "${STATUS_NOT_FOUND}" --color YELLOW
            AddHP 0 1
        fi
        if [ "${FIND2}" != "" ]; then
            LogText "Result RA.5: UPSCABLE is configured - OK"
            Display --indent 2 --text "+ Verifying RA.5 Emergency power: UPSCABLE is configured" --result "${STATUS_OK}" --color GREEN
                AddHP 1 1
        else
            LogText "Result RA.5: UPSCABLE is not configured - NOT FOUND"
            Display --indent 2 --text "+ Verifying RA.5 Emergency power: UPSCABLE is configured" --result "${STATUS_NOT_FOUND}" --color YELLOW
            AddHP 0 1
        fi
	if [ "${FIND3}" != "" ]; then
            LogText "Result RA.5: UPSTYPE is configured - OK"
            Display --indent 2 --text "+ Verifying RA.5 Emergency power: UPSTYPE is configured" --result "${STATUS_OK}" --color GREEN
            AddHP 1 1
        else
            LogText "Result RA.5: UPSTYPE is not configured - NOT FOUND"
            Display --indent 2 --text "+ Verifying RA.5 Emergency power: UPSTYPE is configured" --result "${STATUS_NOT_FOUND}" --color YELLOW
            AddHP 0 1
        fi
        if [ "${FIND4}" != "" ]; then
            LogText "Result RA.5: DEVICE is configured - OK"
            Display --indent 2 --text "+ Verifying RA.5 Emergency power: DEVICE is configured" --result "${STATUS_OK}" --color GREEN
            AddHP 1 1
        else
            LogText "Result RA.5: DEVICE is not configured - NOT FOUND"
            Display --indent 2 --text "+ Verifying RA.5 Emergency power: DEVICE is configured" --result "${STATUS_NOT_FOUND}" --color YELLOW
            AddHP 0 1
        fi
        if [ "${FIND5}" != "" ]; then
            LogText "Result RA.5: ONBATTERYDELAY is configured - OK"
            Display --indent 2 --text "+ Verifying RA.5 Emergency power: ONBATTERYDELAY is configured" --result "${STATUS_OK}" --color GREEN
            AddHP 1 1
        else
            LogText "Result RA.5: ONBATTERYDELAY is not configured - NOT FOUND"
            Display --indent 2 --text "+ Verifying RA.5 Emergency power: ONBATTERYDELAY is configured" --result "${STATUS_NOT_FOUND}" --color YELLOW
            AddHP 0 1
        fi
        if [ "${FIND6}" != "" ]; then
            LogText "Result RA.5: BATTERYLEVEL is configured - OK"
            Display --indent 2 --text "+ Verifying RA.5 Emergency power: BATTERYLEVEL is configured" --result "${STATUS_OK}" --color GREEN
            AddHP 1 1
        else
            LogText "Result RA.5: BATTERYLEVEL is not configured - NOT FOUND"
            Display --indent 2 --text "+ Verifying RA.5 Emergency power: BATTERYLEVEL is configured" --result "${STATUS_NOT_FOUND}" --color YELLOW
            AddHP 0 1
        fi
	if [ "${FIND7}" != "" ]; then
            LogText "Result RA.5: MINUTES is configured - OK"
            Display --indent 2 --text "+ Verifying RA.5 Emergency power: MINUTES is configured" --result "${STATUS_OK}" --color GREEN
            AddHP 1 1
        else
            LogText "Result RA.5: MINUTES is not configured - NOT FOUND"
            Display --indent 2 --text "+ Verifying RA.5 Emergency power: MINUTES is configured" --result "${STATUS_NOT_FOUND}" --color YELLOW
            AddHP 0 1
        fi
        if [ "${FIND8}" != "" ]; then
                LogText "Result RA.5: apcupsd configuration is active - OK"
                Display --indent 2 --text "+ Verifying RA.5 Emergency power: the apcupsd configuration is active" --result "${STATUS_OK}" --color GREEN
                AddHP 1 1
        else
                LogText "Result RA.5: apcupsd configuration is inactive - NOT FOUND"
                Display --indent 2 --text "+ Verifying RA.5 Emergency power: the apcupsd configuration is active" --result "${STATUS_NOT_FOUND}" --color YELLOW
                AddHP 0 1
        fi
    fi
fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
            # Test        : CUST-0350
    # Description : Verifying if there is iptables, nftables, ufw, firewalld, shorewall, pfsense, firestarter, netfilter or ipfire is installed as an interface to the security settings and if either networkmanager or wicd is installed as an interface to the network settings
    Register --test-no CUST-0350 --weight L --network NO --category security --description "Verifying for iptables, nftables, ufw, firewalld, shorewall, pfsense, firestarter, netfilter or ipfire and for networkmanager or wicd as settings interfaces"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric RA.6: Network and security configuration settings: network and security configuration settings can be configured through an interface according to configuration instructions by the system supplier"
        # LogText "Test: Verifying for network and security settings interfaces"
                if [ -x "$(command -v iptables)" ]; then
                        LogText "Result RA.6: iptables is  installed - OK"
                        Display --indent 2 --text "+ Verifying RA.6 Network and security configuration settings: is iptables installed" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                elif [ -x "$(command -v nftables)" ]; then
                        LogText "Result RA.6: nftables is  installed - OK"
                        Display --indent 2 --text "+ Verifying RA.6 Network and security configuration settings: is nftables installed" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                elif [ -x "$(command -v ufw)" ]; then
                        LogText "Result RA.6: ufw is installed - OK"
                        Display --indent 2 --text "+ Verifying RA.6 Network and security configuration settings: is ufw installed" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                elif [ -x "$(command -v firewalld)" ]; then
                        LogText "Result RA.6: firewalld is installed."
                        Display --indent 2 --text "+ Verifying RA.6 Network and security configuration settings: is firewalld installed" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                elif [ -x "$(command -v shorewall)" ]; then
                        LogText "Result RA.6: shorewall is installed - OK"
                        Display --indent 2 --text "+ Verifying RA.6 Network and security configuration settings: is shorewall installed" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                elif [ -x "$(command -v pfsense)" ]; then
                        LogText "Result RA.6: pfsense is installed - OK"
                        Display --indent 2 --text "+ Verifying RA.6 Network and security configuration settings: is pfsense installed" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                elif [ -x "$(command -v firestarter)" ]; then
                        LogText "Result RA.6: firestarter is installed - OK"
                        Display --indent 2 --text "+ Verifying RA.6 Network and security configuration settings: is firestarter installed" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                elif [ -x "$(command -v netfilter)" ]; then
                        LogText "Result RA.6: netfilter is installed - OK"
                        Display --indent 2 --text "+ Verifying RA.6 Network and security configuration settings: is netfilter installed" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
		elif [ -x "$(command -v ipfire)" ]; then
                        LogText "Result RA.6: ipfire is installed - OK"
                        Display --indent 2 --text "+ Verifying RA.6 Network and security configuration settings: is ipfire installed" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                else
                        LogText "Result RA.6: No security settings interface is installed - NOT FOUND"
                        Display --indent 2 --text "+ Verifying if there is a security settings interface installed" --result "${STATUS_NOT_FOUND}" --color RED
                        AddHP 0 1
                fi

                if [ -x "$(command -v network-manager)" ]; then
                        LogText "Result RA.6: Network Manager is installed - OK"
                        Display --indent 2 --text "+ Verifying RA.6 Network and security configuration settings: is nmtui installed" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                elif [ -x "$(command -v wicd)" ]; then
                        LogText "Result RA.6: wicd is installed - OK"
                        Display --indent 2 --text "+ Verifying RA.6 Network and security configuration settings: is wicd installed" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                else
                        LogText "Result RA.6: No network settings interface is installed - NOT FOUND"
                        Display --indent 2 --text "+ Verifying RA.6 Network and security configuration settings: is a network settings interface installed" --result "${STATUS_NOT_FOUND}" --color RED
                        AddHP 0 1
                fi
        fi

#
#--------------------------------------------------------------------------------------------------------------------------------------
#
     # Test        : CUST-0360
    # Description : Verifying if there is chkconfig or update-rc.d installed for service disabling and iptables for port and protocol disabling
    Register --test-no CUST-0360 --weight L --network NO --category security --description "Verifying for chkconfig or update-rc.d"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric RA.7: Least functionality: functions, ports, protocols and services can be denied or limited in case they are not needed"
        # LogText "Test: Verifying chkconfig or update-rc.d"
        if [ -x "$(command -v chkconfig)" ]; then 
                LogText "Result RA.7: chkconfig is installed for service disabling - OK"
                Display --indent 2 --text "+ Verifying RA.7 Least functionality: chkconfig for service disabling" --result "${STATUS_OK}" --color GREEN
                AddHP 1 1
        elif [ -x "$(command -v update-rc.d)" ]; then 
                LogText "Result RA.7: update-rc.d is installed for service disabling - OK"
                Display --indent 2 --text "+ Verifying RA.7 Least functionality: update-rc.d for service disabling" --result "${STATUS_OK}" --color GREEN
                AddHP 1 1
        else
                LogText "Result RA.7: Neither chkconfig nor update-rc.d is installed for service disabling - NOT FOUND"
                Display --indent 2 --text "+ Verifying RA.7 Least functionality: rsync installed for service disabling" --result "${STATUS_NOT_FOUND}" --color RED
                AddHP 0 1
        fi

        if [ -x "$(command -v iptables)" ]; then 
                LogText "Result RA.7: iptables is installed for for port and protocol disabling - OK"
                Display --indent 2 --text "+ Verifying RA.7 Least functionality: iptables installed for port and protocol disabling" --result "${STATUS_OK}" --color GREEN
                AddHP 1 1
        else
                LogText "Result RA.7: iptables is not installed for port and protocol disabling - NOT FOUND"
                Display --indent 2 --text "+ Verifying RA.7 Least functionality: iptables installed for port and protocol disabling" --result "${STATUS_NOT_FOUND}" --color RED
                AddHP 0 1
        fi
    fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
     # Test        : CUST-0370
    # Description : Verifying if there is lshw installed for component inventory listing
    Register --test-no CUST-0370 --weight L --network NO --category security --description "Verifying for lshw package"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric RA.8: Control system component inventory: the inventory of the system components can be listed by the system"
        # LogText "Test: Verifying lshw"
                if [ -x "$(command -v lshw)" ]; then
                        LogText "Result RA8: lshw is installed for component inventory listing - OK"
                        Display --indent 2 --text "+ Verifying RA.8 Control system component inventory: is lshw for component inventory listing" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                else
                        LogText "Result RA8: lshw is not installed for component inventory listing - NOT FOUND"
                        Display --indent 2 --text "+ Verifying RA.8 Control system component inventory: is lshw installed for component inventory listing" --result "${STATUS_NOT_FOUND}" --color RED
                        AddHP 0 1
                fi
        fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
        # Test        : CUST-0380
    # Description : Verifying if the 802.1Q standard is supported for creating VLANs
    Register --test-no CUST-0380 --weight L --network NO --category security --description "Verifying for 802.1Q standard support for VLANs"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric RDF.1: Network segmentation: the networks of control systems can be segmented from normal networks and networks of critical control system from other control system networks by logical means"
        # LogText "Test: Verifying 802.1Q"
        FIND=$(${LSMODBINARY} | ${AWKBINARY} '$1 ~ /^8021q/ {print $1}')
        if [ "${FIND}" != "" ]; then
            LogText "Result RDF.1: 802.1Q standard and therefore VLANs are supported by the host - OK"
                Display --indent 2 --text "+ Verifying RDF.1 Network segmentation: 802.1Q standard and therefore VLANs are supported" --result "${STATUS_OK}" --color GREEN
                AddHP 1 1
        else
                LogText "Result RDF.1: 802.1Q standard and therefore VLANs are not supported by the host - WARNING"
                Display --indent 2 --text "+ Verifying RDF.1 Network segmentation: 802.1Q standard and therefore VLANs are supported" --result "${STATUS_WARNING}" --color RED
                AddHP 0 1
        fi
    fi
#
#--------------------------------------------------------------------------------------------------------------------------------------
#
      # Test        : CUST-0390
    # Description : Verifying if iptables has an empty ruleset (should have at least 5 or more rules)
    Register --test-no CUST-0390 --weight L --network NO --category security --description "Verifying for empty ruleset inside iptables"
        if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric RDF.2: Zone boundary protection: monitoring and management of zone boundary communication can be established for achieving zone compartmentalization"
        # LogText "Test: Verifying ruleset of iptables"
        FIND=$(${IPTABLESBINARY} --list --numeric 2> /dev/null | ${EGREPBINARY} -v "^(Chain|target|$)" | ${WCBINARY} -l | ${TRBINARY} -d ' ')
        if [ ! -z "${FIND}" ]; then
            FIREWALL_ACTIVE=1
            if [ ${FIND} -le 5 ]; then
                FIREWALL_EMPTY_RULESET=1
                LogText "Result RDF.2: iptables ruleset seems to be empty, found ${FIND} rules - WARNING"
                Display --indent 2 --text "+ Verifying RDF.2 Zone boundary protection: empty ruleset" --result "${STATUS_WARNING}" --color RED
                AddHP 0 1
                ReportWarning ${TEST_NO} "iptables modules loaded, but no rules active"
            else
                LogText "Result RDF.2: one or more rules are available, ${FIND} rules - OK"
                Display --indent 2 --text "+ Verifying RDF.2 Zone boundary protection: empty ruleset" --result "${STATUS_OK}" --color GREEN
                AddHP 1 1
            fi
        fi
    fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
     # Test        : CUST-0400
    # Description : Verifying if there are rules in iptables blocking outgoing email and social media communication
    Register --test-no CUST-0400 --weight L --network NO --category security --description "Verifying for blocking of outgoing mails and social media"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric RDF.3: General purpose person-to-person communication restrictions: general purpose person-to-person communication coming from outside of the system can be denied"
        # LogText "Test: Verifying for blocked outgoing mails and social media"
        FIND=$(${IPTABLESBINARY} --list --numeric 2> /dev/null | ${EGREPBINARY} "^REJECT" | ${AWKBINARY} '$7 ~ /dpt:25/ {print $7}')
        FIND2=$(ping -c 1 facebook.com | ${EGREPBINARY} "^64 bytes" | ${WCBINARY} -l)
        FIND3=$(ping -c 1 twitter.com | ${EGREPBINARY} "^64 bytes" | ${WCBINARY} -l)
        FIND4=$(ping -c 1 instagram.com | ${EGREPBINARY} "^64 bytes" | ${WCBINARY} -l)
        if [ "${FIND}" = "dpt:25" ]; then
            LogText "Result RDF.3: iptables ruleset blocks all outgoing email - OK"
            Display --indent 2 --text "+ Verifying RDF.3 General purpose person-to-person communication restrictions: blocked outgoing email" --result "${STATUS_OK}" --color GREEN
            AddHP 1 1
        else
            LogText "Result RDF.3: iptables ruleset allows all email - WARNING"
            Display --indent 2 --text "+ Verifying RDF.3 General purpose person-to-person communication restrictions: blocked outgoing email" --result "${STATUS_WARNING}" --color RED
            AddHP 0 1
        fi
        if [ "${FIND2}" -eq 0 ]; then 
            LogText "Result RDF.3: iptables ruleset blocks connection to Facebook - OK"
            Display --indent 2 --text "+ Verifying RDF.3 General purpose person-to-person communication restrictions: blocked Facebook connection" --result "${STATUS_OK}" --color GREEN
                AddHP 1 1
        else
            LogText "Result RDF.3: iptables ruleset allows connection to Facebook - WARNING"
            Display --indent 2 --text "+ Verifying RDF.3 General purpose person-to-person communication restrictions: blocked Facebook connection" --result "${STATUS_WARNING}" --color RED
                AddHP 0 1
        fi
        if [ "${FIND3}" -eq 0 ]; then 
            LogText "Result RDF.3: iptables ruleset blocks connection to Twitter - OK"
            Display --indent 2 --text "+ Verifying RDF.3 General purpose person-to-person communication restrictions: blocked Twitter connection" --result "${STATUS_OK}" --color GREEN
            AddHP 1 1
        else
            LogText "Result RDF.3: iptables ruleset allows connection to Twitter - WARNING"
            Display --indent 2 --text "+ Verifying RDF.3 General purpose person-to-person communication restrictions: blocked Twitter connection" --result "${STATUS_WARNING}" --color RED
            AddHP 1 1
        fi
	if [ "${FIND4}" -eq 0 ]; then 
            LogText "Result RDF.3: iptables ruleset blocks connection to Instagram - OK"
            Display --indent 2 --text "+ Verifying RDF.3 General purpose person-to-person communication restrictions: blocked Instagram connection" --result "${STATUS_OK}" --color GREEN
            AddHP 1 1
        else
            LogText "Result: iptables ruleset allows connection to Instagram - WARNING"
            Display --indent 2 --text "+ Verifying RDF.3 General purpose person-to-person communication restrictions: blocked Instagram connection" --result "${STATUS_WARNING}" --color RED
            AddHP 0 1
        fi
    fi

#
#---------------------------------------------------------------------------------------------------------------------------------------
#
      # Test        : CUST-0410
    # Description : Check if HAProxy is installed
    Register --test-no CUST-0410 --weight L --network NO --category security --description "haproxy package"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric RDF.4: Application partitioning: applications, services and data can be partitioned for establishing zoning, depending on the degree of criticality"
        # LogText "Test: Verifying if HAProxy program is installed"
                if ! [ -x "$(command -v haproxy)" ]; then
                        LogText "Result RDF.4: HAProxy is not installed - NOT FOUND"
                        Display --indent 2 --text "+ Verifying RDF.4 Application partitioning: is HAProxy installed" --result "${STATUS_NOT_FOUND}" --color YELLOW
                else
                        LogText "Result RDF.4: HAProxy is installed - OK"
                        Display --indent 2 --text "+ Verifying RDF.4 Application partitioning: is HAProxy installed" --result "${STATUS_OK}" --color GREEN
                fi
        fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
        # Test        : CUST-0420
    # Description : Verifying if SSL, TLS or IPsec is supported on the host
        #REQ=$(${NETSTATBINARY} -ptnl | ${GREPBINARY} ":443" )
    #if [ "${REQ}" != "" ]; then PREQS_MET="YES"; else PREQS_MET="NO"; fi
        Register --test-no CUST-0420 --weight L --network NO --category security --description "Verifying for SSL, TLS or IPsec support"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric SI.1: Communication integrity: the integrity of information can be protected during transmission"
        # LogText "Test: Verifying support for SSL, TLS or IPsec"
        FIND=$(timeout 1s ${OPENSSLBINARY} s_client -tls1 -connect example.com:443 2>/dev/null | ${GREPBINARY} -i "server certificate" )
        FIND2=$(timeout 1s ${OPENSSLBINARY} s_client -ssl2 -connect example.com:443 2>/dev/null | ${GREPBINARY} -i "server certificate" )
        FIND3=$(timeout 1s ${OPENSSLBINARY} s_client -ssl3 -connect example.com:443 2>/dev/null | ${GREPBINARY} -i "server certificate" )
        if [ "${FIND}" != "" ]; then
                LogText "Result SI.1: TLS is supported by the host - OK"
                Display --indent 2 --text "+ Verifying SI.1 Communication integrity: SSL, TLS or IPsec is supported" --result "${STATUS_OK}" --color GREEN
                AddHP 1 1
        elif [ "${FIND2}" != "" ]; then 
                LogText "Result SI.1: SSL v2 is supported by the host - OK"
                Display --indent 2 --text "+ Verifying SI.1 Communication integrity: SSL, TLS or IPsec is supported" --result "${STATUS_OK}" --color GREEN
                AddHP 1 1
        elif [ "${FIND3}" != "" ]; then 
                LogText "Result SI.1: TLS v3 is supported by the host - OK"
                Display --indent 2 --text "+ Verifying SI.1 Communication integrity: SSL, TLS or IPsec is supported" --result "${STATUS_OK}" --color GREEN
                AddHP 1 1
        elif [ -f /etc/ipsec.conf ]; then 
                LogText "Result SI.1: IPsec is supported by the host - OK"
                Display --indent 2 --text "+ Verifying SI.1 Communication integrity: SSL, TLS or IPsec is supported" --result "${STATUS_OK}" --color GREEN
                AddHP 1 1
        else
                LogText "Result SI.1: Neither SSL, TLS or IPsec are supported by the host - WARNING"
                Display --indent 2 --text "+ Verifying SI.1 Communication integrity: SSL, TLS or IPsec is supported" --result "${STATUS_WARNING}" --color RED
                AddHP 0 1
        fi
fi
#
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
	# Test        : CUST-0430
    # Description : Check if an anti-virus tool is installed
    AVAST_DAEMON_RUNNING=0
    AVIRA_DAEMON_RUNNING=0
    BITDEFENDER_DAEMON_RUNNING=0
    CLAMD_RUNNING=0
    CLAMSCAN_INSTALLED=0
    ESET_DAEMON_RUNNING=0
    FRESHCLAM_DAEMON_RUNNING=0
    MCAFEE_SCANNER_RUNNING=0
    MALWARE_SCANNER_INSTALLED=0
    SOPHOS_SCANNER_RUNNING=0
    SYMANTEC_SCANNER_RUNNING=0

    Register --test-no CUST-0430 --weight L --network NO --category security --description "Check if anti-virus tool is installed"
    if [ ${SKIPTEST} -eq 0 ]; then
        FOUND=0
	LogText "Metric SI.2: Malicious code protection: protection measures against malicious code can be used and updated for handling its resulting effects"

        # ESET security products
        LogText "Test: Verifying process esets_daemon"
        IsRunning esets_daemon
        if [ ${RUNNING} -eq 1 ]; then
            FOUND=1
            ESET_DAEMON_RUNNING=1
            MALWARE_SCANNER_INSTALLED=1
            if IsVerbose; then Display --indent 2 --text "${GEN_Verifying} ESET daemon" --result "${STATUS_FOUND}" --color GREEN; fi
            LogText "Result: found ESET security product"
            Report "malware_scanner[]=eset"
        fi

        # Bitdefender (macOS)
        LogText "Test: Verifying process epagd"
        IsRunning epagd
        if [ ${RUNNING} -eq 1 ]; then
            FOUND=1
            BITDEFENDER_DAEMON_RUNNING=1
            MALWARE_SCANNER_INSTALLED=1
            if IsVerbose; then Display --indent 2 --text "${GEN_Verifying} Bitdefender agent" --result "${STATUS_FOUND}" --color GREEN; fi
            LogText "Result: found Bitdefender security product"
            Report "malware_scanner[]=bitdefender"
        fi

        # Avast (macOS)
        LogText "Test: Verifying process com.avast.daemon"
        IsRunning com.avast.daemon
        if [ ${RUNNING} -eq 1 ]; then
            FOUND=1
            AVAST_DAEMON_RUNNING=1
            MALWARE_SCANNER_INSTALLED=1
            if IsVerbose; then Display --indent 2 --text "${GEN_Verifying} Avast daemon" --result "${STATUS_FOUND}" --color GREEN; fi
            LogText "Result: found Avast security product"
            Report "malware_scanner[]=avast"
        fi

        # Avira
        LogText "Test: Verifying process Avira daemon"
        IsRunning avqmd
        if [ ${RUNNING} -eq 1 ]; then
            FOUND=1
            AVIRA_DAEMON_RUNNING=1
            MALWARE_SCANNER_INSTALLED=1
            if IsVerbose; then Display --indent 2 --text "${GEN_Verifying} Avira daemon" --result "${STATUS_FOUND}" --color GREEN; fi
            LogText "Result: found Avira security product"
            Report "malware_scanner[]=avira"
        fi

        # Cylance (macOS)
        LogText "Test: Verifying process CylanceSvc"
        IsRunning CylanceSvc
        if [ ${RUNNING} -eq 1 ]; then
            FOUND=1
            if IsVerbose; then Display --indent 2 --text "${GEN_Verifying} CylancePROTECT" --result "${STATUS_FOUND}" --color GREEN; fi
            LogText "Result: found CylancePROTECT service"
            AVAST_DAEMON_RUNNING=1
            MALWARE_SCANNER_INSTALLED=1
            Report "malware_scanner[]=cylance-protect"
        fi

        # McAfee products
        LogText "Test: Verifying process cma or cmdagent (McAfee)"
        # cma is too generic to match on, so we want to ensure that it is related to McAfee first
        if [ -x /opt/McAfee/cma/bin/cma ]; then
            IsRunning cma
            if [ ${RUNNING} -eq 1 ]; then MCAFEE_SCANNER_RUNNING=1; fi
        else
            IsRunning cmdagent
            if [ ${RUNNING} -eq 1 ]; then MCAFEE_SCANNER_RUNNING=1; fi
        fi
        if [ ${MCAFEE_SCANNER_RUNNING} -eq 1 ]; then
            FOUND=1
            if IsVerbose; then Display --indent 2 --text "${GEN_Verifying} McAfee" --result "${STATUS_FOUND}" --color GREEN; fi
            LogText "Result: Found McAfee"
            MALWARE_SCANNER_INSTALLED=1
            Report "malware_scanner[]=mcafee"
        fi

        # Sophos savscand/SophosScanD
        LogText "Test: Verifying process savscand"
        IsRunning savscand
        if [ ${RUNNING} -eq 1 ]; then
            FOUND=1
            SOPHOS_SCANNER_RUNNING=1
        fi
        LogText "Test: Verifying process SophosScanD"
        IsRunning SophosScanD
        if [ ${RUNNING} -eq 1 ]; then
            FOUND=1
            SOPHOS_SCANNER_RUNNING=1
        fi
        if [ ${SOPHOS_SCANNER_RUNNING} -eq 1 ]; then
            if IsVerbose; then Display --indent 2 --text "${GEN_Verifying} Sophos" --result "${STATUS_FOUND}" --color GREEN; fi
            LogText "Result: Found Sophos"
            MALWARE_SCANNER_INSTALLED=1
            Report "malware_scanner[]=sophos"
        fi

        # Symantec rtvscand/smcd/symcfgd
        LogText "Test: Verifying process rtvscand"
        IsRunning rtvscand
        if [ ${RUNNING} -eq 1 ]; then
            SYMANTEC_SCANNER_RUNNING=1
        fi
        LogText "Test: Verifying process Symantec management client service"
        IsRunning smcd
        if [ ${RUNNING} -eq 1 ]; then
            SYMANTEC_SCANNER_RUNNING=1
        fi
        LogText "Test: Verifying process Symantec Endpoint Protection configuration service"
        IsRunning symcfgd
        if [ ${RUNNING} -eq 1 ]; then
            SYMANTEC_SCANNER_RUNNING=1
        fi
        if [ ${SYMANTEC_SCANNER_RUNNING} -eq 1 ]; then
            if IsVerbose; then Display --indent 2 --text "${GEN_Verifying} Symantec" --result "${STATUS_FOUND}" --color GREEN; fi
            LogText "Result: found one or more Symantec components"
            MALWARE_SCANNER_INSTALLED=1
            FOUND=1
            Report "malware_scanner[]=symantec"
        fi

        # TrendMicro (macOS)
        LogText "Test: Verifying process TmccMac to test for Trend Micro anti-virus (macOS)"
        IsRunning TmccMac
        if [ ${RUNNING} -eq 1 ]; then
            if IsVerbose; then Display --indent 2 --text "${GEN_Verifying} Trend Micro anti-virus" --result "${STATUS_FOUND}" --color GREEN; fi
            LogText "Result: found Trend Micro component"
            FOUND=1
            MALWARE_SCANNER_INSTALLED=1
            Report "malware_scanner[]=trend-micro-av"
        fi

        if [ ${FOUND} -eq 0 ]; then
            LogText "Result SI.2: no commercial anti-virus tools found - NOT FOUND"
	    Display --indent 2 --text "+ Verifying SI.2 Malicious code protection: anti-virus tools found" --result "${STATUS_NOT_FOUND}" --color RED
            AddHP 0 1
        else
            LogText "Result SI.2: found one or more commercial anti-virus tools - FOUND"
	    Display --indent 2 --text "+ Verifying SI.2 Malicious code protection: anti-virus tools found" --result "${STATUS_FOUND}" --color GREEN
            AddHP 1 1
        fi
    fi
#
#--------------------------------------------------------------------------------------------------------------------------------
#
	IDS_IPS_TOOL_FOUND=0
    FAIL2BAN_FOUND=0
    FAIL2BAN_EMAIL=0
    FAIL2BAN_SILENT=0
    PERFORM_FAIL2BAN_TESTS=0
    SNORT_FOUND=0
    SNORT_RUNNING=0
	
	# Test        : CUST-0440
    # Description : Check for IDS tools
    Register --test-no CUST-0440 --weight L --network NO --category security --description "Check for presence of IDS tools"
    if [ ${SKIPTEST} -eq 0 ]; then
	LogText "Metric SI.3: Security functionality verification: the right operation of the used, standard-compliant security functionalities can be verified"
        # Description : Check for Fail2ban
		# Fail2ban presence
        if [ -n "${FAIL2BANBINARY}" ]; then
            FAIL2BAN_FOUND=1
            IDS_IPS_TOOL_FOUND=1
            LogText "Result: Fail2ban is installed (${FAIL2BANBINARY})"
            Report "ids_ips_tooling[]=fail2ban"
            Display --indent 2 --text "presence of Fail2ban" --result "${STATUS_FOUND}" --color GREEN
        else
            LogText "Result: Fail2ban not present (fail2ban-server not found)"
        fi
		
		# Description : Check for Snort
        # Snort presence
        if [ -n "${SNORTBINARY}" ]; then
            SNORT_FOUND=1
            IDS_IPS_TOOL_FOUND=1
            LogText "Result: Snort is installed (${SNORTBINARY})"
            Report "ids_ips_tooling[]=snort"
            Display --indent 2 --text "presence of Snort" --result "${STATUS_FOUND}" --color GREEN
        fi

        if IsRunning "snort"; then
            SNORT_FOUND=1
            SNORT_RUNNING=1
            SNORT_LOG=$(${PSBINARY} | ${AWKBINARY} -F-.. '/snort/ {print $4}' | ${HEADBINARY} -1)
        else
            LogText "Result: Snort not present (Snort not running)"
        fi
		
		# Description : Check for OSSEC
        if IsRunning "ossec-analysisd"; then
            IDS_IPS_TOOL_FOUND=1
            LogText "Result: OSSEC analysis daemon is active"
            Report "ids_ips_tooling[]=ossec"
            Display --indent 2 --text "presence of OSSEC" --result "${STATUS_FOUND}" --color GREEN
        else
            LogText "Result: OSSEC analysis daemon not active"
        fi

	# Description : Check for an IDS/IPS tool
        if [ ${IDS_IPS_TOOL_FOUND} -eq 1 ]; then
            LogText "Result SI.3: IDS/IPS tooling - FOUND"
            Display --indent 2 --text "+ Verifying SI.3 Security functionality verification: IDS/IPS tooling" --result "${STATUS_FOUND}" --color GREEN
            AddHP 1 1
        else
            LogText "Result SI.3: IDS/IPS tooling - NONE"
            Display --indent 2 --text "+ Verifying SI.3 Security functionality verification: IDS/IPS tooling" --result "${STATUS_NONE}" --color YELLOW
            #ReportSuggestion ${TEST_NO} "Install and configure automated intrusion detection/prevention tools"
            AddHP 0 1
        fi
    fi
#
#--------------------------------------------------------------------------------------------------------------------------------
#
    # Test        : CUST-0450
    # Description : Verifying if md5sum, sha256sum or sha512sum are installed for cryptographic hash verification
    Register --test-no CUST-0450 --weight L --network NO --category security --description "Verifying for md5sum, sha256sum or sha512sum"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric SI.4: Software and information integrity: the integrity of information and software at rest can be handled and protected against wrongful changes"
        # LogText "Test: Verifying md5sum, sha256sum or sha512sum"
                if [ -x "$(command -v md5sum)" ]; then
                        LogText "Result SI.4: md5sum is installed - OK"
                        Display --indent 2 --text "+ Verifying SI.4 Software and information integrity: is +md5sum installed" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                elif [ -x "$(command -v sha256sum)" ]; then
                        LogText "Result SI.4: sha256sum is installed - OK"
                        Display --indent 2 --text "+ Verifying SI.4 Software and information integrity: is sha256sum installed" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                elif [ -x "$(command -v sha512sum)" ]; then
                        LogText "Result SI.4: sha512sum is installed - OK"
                        Display --indent 2 --text "+ Verifying SI.4 Software and information integrity: is sha512sum installed" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                else
                        LogText "Result SI.4: Neither md5sum, sha256sum or sha512sum are installed - NOT FOUND"
                        Display --indent 2 --text "+ Verifying SI.4 Software and information integrity: are md5sum, sha256sum or sha512sum installed" --result "${STATUS_NOT_FOUND}" --color YELLOW
                        AddHP 0 1
                fi
        fi
#
#----------------------------------------------------------------------------------------------------------------------------------------
#
    # Test        : CUST-0460
    # Description : Check if Tripwire is installed
    Register --test-no CUST-0460 --weight L --network NO --category security --description "tripwire package"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric SI.5: Input validation: the syntax and content of system input, which manipulates industrial process control and the system itself, is validated"
        # LogText "Test: Verifying if tripwire program is installed"
                if ! [ -x "$(command -v tripwire)" ]; then
                        LogText "Result SI.5: tripwire is not installed - NOT FOUND"
                        Display --indent 2 --text "+ Verifying SI.5 Input validation: is tripwire installed" --result "${STATUS_NOT_FOUND}" --color YELLOW
                        AddHP 0 1
                else
                        LogText "Result SI.5: tripwire is installed - OK"
                        Display --indent 2 --text "+ Verifying SI.5 Input validation: is tripwire installed" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                fi
        fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
    # Test        : CUST-0465
    # Description : Check if Timeshift is installed
    Register --test-no CUST-0460 --weight L --network NO --category security --description "timeshift package"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric SI.6: Deterministic output: the system output can be set to a preconfigured value if system operation is affected by an attack"
        # LogText "Test: Verifying if timeshift program is installed"
                if ! [ -x "$(command -v timeshift)" ]; then
                        LogText "Result SI.6: timeshift is not installed - NOT FOUND"
                        Display --indent 2 --text "+ Verifying SI.6 Deterministic output: is timeshift installed" --result "${STATUS_NOT_FOUND}" --color YELLOW
                        AddHP 0 1
                else
                        LogText "Result SI.6: timeshift is installed - OK"
                        Display --indent 2 --text "+ Verifying SI.6 Deterministic output: is timeshift installed" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                fi
        fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
	# Test        : CUST-0480
    # Description : Check if Aff3ct is installed
    Register --test-no CUST-0480 --weight L --network NO --category security --description "aff3ct package"
    if [ ${SKIPTEST} -eq 0 ]; then
	LogText "Metric SI.7: Error handling: the correction of these errors can happen effectively without revealing more information than necessary for troubleshooting"
        # LogText "Test: Verifying if aff3ct program is installed"
		if ! [ -x "$(command -v aff3ct)" ]; then
			LogText "Result SI.7: aff3ct is not installed - NOT FOUND"
			Display --indent 2 --text "+ Verifying SI.7 Error handling: is aff3ct installed" --result "${STATUS_NOT_FOUND}" --color YELLOW
			AddHP 0 1
		else
			LogText "Result SI.7: aff3ct is installed - OK"
        # LogText "Test Verifying if gnupg is installed"
                if ! [ -x "$(command -v gnupg)" ]; then
                        LogText "Result UC.12: gnupg is not installed - NOT FOUND"
                        Display --indent 2 --text "+ Verifying UC.12 Non-repudiation: is gnupg installed" --result "${STATUS_NOT_FOUND}" --color YELLOW
                        AddHP 0 1
                else
                        LogText "Result UC.12: gnupg is installed - OK"
                        Display --indent 2 --text "+ Verifying UC.12 Non-repudiation: is gnupg installed" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                fi
        fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
       # Test        : CUST-0490
    # Description : Verifying if there are SSH keys in use in the authentication agent for SSH sessions
    Register --test-no CUST-0490 --weight L --network NO --category security --description "Verifying for used SSH key authentication"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric SI.8: Session integrity: invalid session IDs are denied during usage"
        # LogText "Test: Verifying SSH keys in use"
                FIND=$(${SSHKEYSCANBINARY} `hostname` 2>/dev/null | ${GREPBINARY} -i rsa)
                if [ "$FIND" != "" ]; then
                        LogText "Result SI.8: SSH key(s) in use for encrypted sessions - OK"
                        Display --indent 2 --text "+ Verifying SI.8 Session integrity: SSH key(s) in use" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                else
                        LogText "Result SI.8: SSH key(s) not in use for encrypted sessions - NOT FOUND"
                        Display --indent 2 --text "+ Verifying SI.8 Session integrity: SSH key(s) in use" --result "${STATUS_NOT_FOUND}" --color YELLOW
                        AddHP 0 1
                fi
        fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
  # Description : Verifying if the file permission are configured rightfully for /var/log/audit/audit.log
    Register --test-no CUST-0500 --weight L --network NO --category security --description "Verifying for right file permission of /var/log/audit/audit.log"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric SI.9: Protection of audit information: audit software and information is protected against wrongful access, modification and deletion"
        # LogText "Test: Verifying for file permissions for audits"
        if [ -d "/var/log/audit" ] && [ -d "/etc/audit" ]; then
                FIND=$(${LSBINARY} -l /var/log/audit/ | ${GREPBINARY} -i "audit.log" | ${CUTBINARY} -d ' ' -f1)
                FIND2=$(${LSBINARY} -l /etc/audit/ | ${GREPBINARY} -i "auditd.conf" | ${CUTBINARY} -d ' ' -f1)
                FIND3=$(${LSBINARY} -l /etc/audit/ | ${GREPBINARY} -i "audit.rules" | ${CUTBINARY} -d ' ' -f1)
                FIND4=$(${LSBINARY} -l /sbin/ | ${GREPBINARY} -i "auditd" | ${CUTBINARY} -d ' ' -f1)
                if [ "$FIND" == "-rw-------" ]; then
                        LogText "Result SI.9: File permissions are set rightfully for the audit log - OK"
                        Display --indent 2 --text "+ Verifying SI.9 Protection of audit information: the audit file permissions are set rightfully" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                else
                        LogText "Result SI.9: File permissions are set wrongfully for the audit log - WARNING"
                        Display --indent 2 --text "+ Verifying SI.9 Protection of audit information: the audit file permissions are set rightfully" --result "${STATUS_WARNING}" --color YELLOW
                        AddHP 0 1
                fi
                if [ "$FIND2" == "-rw-r-----" ]; then
                        LogText "Result SI.9: File permissions are set rightfully for the audit log configuration - OK"
                        Display --indent 2 --text "+ Verifying SI.9 Protection of audit information: the audit file permissions are set rightfully" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                else
                        LogText "Result SI.9: File permissions are set wrongfully for the audit log configuration - WARNING"
                        Display --indent 2 --text "+ Verifying SI.9 Protection of audit information: the audit file permissions are set rightfully" --result "${STATUS_WARNING}" --color YELLOW
                        AddHP 0 1
                fi
                if [ "$FIND3" == "-rw-r-----" ]; then
                        LogText "Result SI.9: File permissions are set rightfully for the audit log rules - OK"
                        Display --indent 2 --text "+ Verifying SI.9 Protection of audit information: the audit file permissions are set rightfully" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                else
                        LogText "Result SI.9: File permissions are set wrongfully for the audit log rules - WARNING"
                        Display --indent 2 --text "+ Verifying SI.9 Protection of audit information: the audit file permissions are set rightfully" --result "${STATUS_WARNING}" --color YELLOW
                        AddHP 0 1
                fi
		if [ "$FIND4" == "-rwxr-x---" ]; then
                        LogText "Result SI.9: File permissions are set rightfully for the audit log daemon - OK"
                        Display --indent 2 --text "+ Verifying SI.9 Protection of audit information: the audit file permissions are set rightfully" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                else
                        LogText "Result SI.9: File permissions are set wrongfully for the audit log daemon - WARNING"
                        Display --indent 2 --text "+ Verifying SI.9 Protection of audit information: the audit file permissions are set rightfully" --result "${STATUS_WARNING}" --color YELLOW
                        AddHP 0 1
                fi
                else
                        LogText "Result SI.9: No auditing directory found - WARNING"
                        Display --indent 2 --text "+ Verifying SI.9 Protection of audit information: No auditing directory found" --result "${STATUS_WARNING}" --color YELLOW
                        AddHP 0 1
                fi
        fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
     # Test        : CUST-0510
    # Description : Verifying if /var/log/audit/audit.log has read-only access
    Register --test-no CUST-0510 --weight L --network NO --category security --description "Verifying for read-only permission of /var/log/audit/audit.log"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric TRE.1: Audit log accessibility: audit logs can be viewed with read permissions by users or services"
        # LogText "Test: Verifying for read-only permissions for audits"
        if [ -d "/var/log/audit" ]; then
                FIND=$(${LSBINARY} -l /var/log/audit/ | ${GREPBINARY} -i "audit.log" | ${CUTBINARY} -d ' ' -f1)
                if [ "$FIND" = "-rw-------" ]; then
                        LogText "Result TRE.1: Audit log file permissions are set rightfully for the audit log - OK"
                        Display --indent 2 --text "+ Verifying TRE.1: Audit log accessibility: the audit log file permission are set rightfully" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                else
                        LogText "Result TRE.1: Audit log file permissions are set wrongfully for the audit log - WARNING"
                        Display --indent 2 --text "+ Verifying TRE.1: Audit log accessibility: the audit log file permission are set wrongfully" --result "${STATUS_WARNING}" --color YELLOW
                        AddHP 0 1
        fi
        else
                LogText "Result TRE.1: No audit log directory found - WARNING"
                Display --indent 2 --text "+ Verifying TRE.1: Audit log accessibility: no audit log directory found" --result "${STATUS_WARNING}" --color YELLOW
                AddHP 0 1
        fi
    fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
     # Test        : CUST-0520
    # Description : Verifying if there is lynis-updater or nagios installed for continious monitoring
    Register --test-no CUST-0520 --weight L --network NO --category security --description "lynis-enterprise or nagios package"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric TRE.2: Continuous monitoring: continuous monitoring can occur for the operation of security measures according to industry’s best practices in order to manage security breaches in time"
        # LogText "Test: Verifying if lynis-updater or nagios is installed"
                if ! [ -x "$(command -v lynis-updater)" ]; then
                        LogText "Result TRE.2: lynis-enterprise is not installed - NOT FOUND"
                        Display --indent 2 --text "+ Verifying TRE.2 Continuous monitoring: is lynis-updater installed" --result "${STATUS_NOT_FOUND}" --color YELLOW
                        AddHP 0 1
                else
                        LogText "Result TRE.2: lynis-enterprise is installed - OK"
                        Display --indent 2 --text "+ Verifying TRE.2 Continuous monitoring: is lynis-updater installed" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                fi
                if ! [ -x "$(command -v nagios)" ]; then
                        LogText "Result TRE.2: nagios is not installed - NOT FOUND"
                        Display --indent 2 --text "+ Verifying TRE.2 Continuous monitoring: is nagios installed" --result "${STATUS_NOT_FOUND}" --color YELLOW
                        AddHP 0 1
                else
                        LogText "Result TRE.2: nagios is installed - OK"
                        Display --indent 2 --text "+ Verifying TRE.2 Continuous monitoring: is nagios installed" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                fi
        fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
    # Test        : CUST-0540
    # Description : Verifying if there is a /etc/sudoers file with at least root privileges specified
    Register --test-no CUST-0540 --weight L --network NO --category security --description "Verifying for /etc/sudoers file with root privilege specification"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric UC.1: Authorization enforcement: authorization of human users is enforced in order to have segregated duties and least privilege"
        # LogText "Test: Verifying"
                if [ -f "/etc/sudoers" ]; then
                        FIND=$(${GREPBINARY} -v "^#" /etc/sudoers | ${GREPBINARY} -i "root")
                        if [ "$FIND" != "" ]; then
                                LogText "Result UC.1: /etc/sudoers file found with root privilege specified - OK"
                                Display --indent 2 --text "+ Verifying UC.1 Authorization enforcement: is a /etc/sudoers file with root privilege specified" --result "${STATUS_OK}" --color GREEN
                                AddHP 1 1
                        else
                                LogText "Result UC.1: /etc/sudoers file found with no root privilege specified - WARNING"
                                Display --indent 2 --text "+ Verifying UC.1 Authorization enforcement: is a /etc/sudoers file with root privilege specified" --result "${STATUS_WARNING}" --color YELLOW
                                AddHP 0 1
                        fi
                else
                        LogText "Result UC.1: No /etc/sudoers file found - NOT FOUND"
                        Display --indent 2 --text "+ Verifying UC.1 Authorization enforcement: is a /etc/sudoers file with root privilege specified" --result "${STATUS_NOT_FOUND}" --color RED
                        AddHP 0 1
                fi
        fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
   # Test        : CUST-0550
    # Description : Verifying if there is wpa_supplicant installed
    Register --test-no CUST-0550 --weight L --network NO --category security --description "Verifying for wpa_supplicant"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric UC.2: Wireless use control: restrictions of wireless connection usage are managed and enforced with best practices"
        # LogText "Test: Verifying wpa_supplicant"
                if ! [ -x "$(command -v wpa_supplicant)" ]; then
                        LogText "Result UC.2: wpa_supplicant is not installed - NOT FOUND"
                        Display --indent 2 --text "+ Verifying UC.2 Wireless use control: there is wpa_supplicant installed" --result "${STATUS_NOT_FOUND}" --color YELLOW
                        AddHP 0 1
                else
                        LogText "Result UC.2: wpa_supplicant is installed - OK"
                        Display --indent 2 --text "+ Verifying UC.2 Wireless use control: there is wpa_supplicant installed" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                fi
                if [ -f "/etc/wpa_supplicant/wpa_supplicant.conf" ]; then
                        FIND=$(${GREPBINARY} -i "^network" /etc/wpa_supplicant/wpa_supplicant.conf)
                        if [ "$FIND" != "" ]; then
                                LogText "Result UC.2: /etc/wpa_supplicant/wpa_supplicant.conf file found with at least one network specified - OK"
                                Display --indent 2 --text "+ Verifying UC.2 Wireless use control: there is a /etc/wpa_supplicant/wpa_supplicant.conf file with networks specified" --result "${STATUS_OK}" --color GREEN
                                AddHP 1 1
                        else
                                LogText "Result UC.2: /etc/wpa_supplicant/wpa_supplicant.conf file found with no network specified - WARNING"
                                Display --indent 2 --text "+ Verifying UC.2 Wireless use control: there is a /etc/wpa_supplicant/wpa_supplicant.conf file with networks specified" --result "${STATUS_WARNING}" --color YELLOW
                                AddHP 0 1
                        fi
                else
                        LogText "Result UC.2: No /etc/wpa_supplicant/wpa_supplicant.conf found - NOT FOUND"
                        Display --indent 2 --text "+ Verifying UC.2 Wireless use control: there is no /etc/wpa_supplicant/wpa_supplicant.conf file found" --result "${STATUS_NOT_FOUND}" --color RED
                        AddHP 0 1
                fi
                                # Description : Verifying if the policy for the input chain is set to drop inside iptables
                # LogText "Test: Verifying drop policy for input chain"
 FIND2=$(${IPTABLESBINARY} -L | ${GREPBINARY} -i "chain input (policy drop)")
                if [ "$FIND2" != "" ]; then
                        LogText "Result UC.2: the input chain is set to drop unknown connections - OK"
                        Display --indent 2 --text "+ Verifying UC.2 Wireless use control: the input chain is set to drop unknown connections" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                else
                        LogText "Result UC.2: the input chain is not set to drop unknown connections - NOT FOUND"
                        Display --indent 2 --text "+ Verifying UC.2 Wireless use control: the input chain is set to drop unknown connections" --result "${STATUS_NOT_FOUND}" --color YELLOW
                        AddHP 0 1
                fi
        fi

#
#----------------------------------------------------------------------------------------------------------------------------------------------
#
          # Test        : CUST-0560
    # Description : Verifying if the USB driver is removed or if the USB storage module is blacklisted for usb disabling
    Register --test-no CUST-0560 --weight L --network NO --category security --description "Verifying for USB driver removed or USB storage module blacklisted"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric UC.3: Use control for portable and mobile devices: usage and data transfer restrictions are managed and enforced for portable and mobile devices"
        # LogText "Test: Verifying USB disabling"
                if [ -f "/lib/modules/`uname -r`/kernel/drivers/usb/storage/usb-storage.ko.xz" ]; then
                        LogText "Result UC.3: the USB storage module is removed for usb disabling - OK"
                        Display --indent 2 --text "+ Verifying UC.3 Use control for portable and mobile devices: the USB storage module is removed for usb disabling" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                elif [ -f "/etc/modprobe.d/blacklist.conf" ]; then
                        FIND=$(${GREPBINARY} -v "^#" /etc/modprobe.d/blacklist.conf | ${GREPBINARY} -i "blacklist usb-storage")
                        if [ "$FIND" != "" ]; then
                                LogText "Result UC.3: the USB storage module is blacklisted for usb disabling - OK"
                                Display --indent 2 --text "+ Verifying UC.3 Use control for portable and mobile devices: the USB storage module is blacklisted for usb disabling" --result "${STATUS_OK}" --color GREEN
                                AddHP 1 1
                        else
                                LogText "Result UC.3: the USB storage module is not blacklisted for usb disabling - NOT FOUND"
                                Display --indent 2 --text "+ Verifying UC.3 Use control for portable and mobile devices: the USB storage module is blacklisted for usb disabling" --result "${STATUS_NOT_FOUND}" --color YELLOW
                                AddHP 0 1
                        fi
                else
                        LogText "Result UC.3: Neither the USB driver is removed or if the USB storage module is blacklisted for usb disabling - NOT FOUND"
                        Display --indent 2 --text "+ Verifying UC.3 Use control for portable and mobile devices: the USB storage module is blacklisted for usb disabling" --result "${STATUS_NOT_FOUND}" --color RED
                        AddHP 0 1
                fi
        fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
        # Test        : CUST-0570
    # Description : Verifying if there is Java and OpenJDK installed
    Register --test-no CUST-0570 --weight L --network NO --category security --description "Java and OpenJDK package"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric UC.4: Mobile code: usage restriction of mobile code is enforced by denying execution or transfer of the code"
        # LogText "Test: Verifying if Java or OpenJDK are installed"
                FIND=$(${DPKGBINARY} -l | grep oracle-java)
                FIND2=$(${DPKGBINARY} --list | grep -i jdk)
                if [ "$FIND" != "" ]; then
                        LogText "Result UC.4: Java is installed and the system therefore allows mobile code execution - WARNING"
                        Display --indent 2 --text "+ Verifying UC.4 Mobile code: Java is installed because of possible mobile code execution" --result "${STATUS_WARNING}" --color YELLOW
                        AddHP 0 1
                else
                        LogText "Result UC.4: Java is not installed and the system is therefore restriced from some mobile code execution - OK"
                        Display --indent 2 --text "+ Verifying UC.4 Mobile code: Java is installed because of possible mobile code execution" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                fi
                if [ "$FIND2" != "" ]; then
                        LogText "Result UC.4: OpenJDK is installed and the system therefore allows mobile code execution - WARNING"
                        Display --indent 2 --text "+ Verifying UC.4 Mobile code: OpenJDK is installed because of possible mobile code execution" --result "${STATUS_WARNING}" --color YELLOW
                        AddHP 0 1
                else
                        LogText "Result UC.4: OpenJDK is not installed and the system is therefore restriced from some mobile code execution - OK"
                        Display --indent 2 --text "+ Verifying UC.4 Mobile code: OpenJDK is installed because of possible mobile code execution" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                fi
        fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
          # Test        : CUST-0580
    # Description : Verifying if there is vlock installed for session locking
    Register --test-no CUST-0580 --weight L --network NO --category security --description "vlock package"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric UC.5: Session lock: a session lock can come into effect after a time frame of inactivity"
        LogText "Test: Verifying if vlock is installed"
                if ! [ -x "$(command -v vlock)" ]; then
                        LogText "Result UC.5: vlock is not installed - NOT FOUND"
                        Display --indent 2 --text "+ Verifying UC.5 Session lock: there is vlock installed" --result "${STATUS_NOT_FOUND}" --color YELLOW
                        AddHP 0 1
                else
                        LogText "Result UC.5: vlock is installed - OK"
                        Display --indent 2 --text "+ Verifying UC.5 Session lock: there is vlock installed" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                fi
        fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
       # Test        : CUST-0590
    # Description : Verifying if there is a ClientALiveInterval or/and ServerALiveInterval and ClientAliveCountMax parameter configured in /etc/ssh/sshd_config for remote session termination
    Register --test-no CUST-0590 --weight L --network NO --category security --description "Verifying for ClientALiveInterval and ServerALiveInterval in /etc/ssh/sshd_config"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric UC.6: Remote session termination: a remote session can be terminated after a time frame of inactivity or after manual activation through the session initiating user"
        # LogText "Test: Verifying for ClientALiveInterval and ServerALiveInterval"
        FIND=$(${GREPBINARY} -i aliveinterval /etc/ssh/sshd_config | ${AWKBINARY} -F '' '$2 ~ /^[0-9]+$/ {print $2}')
        FIND2=$(${GREPBINARY} -i clientalivecountmax /etc/ssh/sshd_config | ${AWKBINARY} -F '' '$2 ~ /^[0-9]+$/ {print $2}')
        if [ "${FIND}" != "" ]; then
            LogText "Result UC.6: Timeout interval is set up due to ClientALiveInterval or ServerALiveInterval configured in /etc/ssh/sshd_config - OK"
                        Display --indent 2 --text "+ Verifying UC.6 Remote session termination: timeout interval is set up" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                else
                        LogText "Result UC.6: Timeout interval is not set up due to ClientALiveInterval or ServerALiveInterval configured in /etc/ssh/sshd_config - NOT FOUND"
                        Display --indent 2 --text "+ Verifying UC.6 Remote session termination: timeout interval is set up" --result "${STATUS_NOT_FOUND}" --color RED
                        AddHP 0 1
                fi
                if [ "${FIND2}" != "" ]; then
                        LogText "Result UC.6: Number of client alive messages are set up due to ClientAliveCountMax configured in /etc/ssh/sshd_config - OK"
                        Display --indent 2 --text "+ Verifying UC.6 Remote session termination: number of client alive messages are set up" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                else
                        LogText "Result UC.6: Number of client alive messages are not set up due to ClientAliveCountMax configured in /etc/ssh/sshd_config - NOT FOUND"
                        Display --indent 2 --text "+ Verifying UC.6 Remote session termination: number of client alive messages are set up" --result "${STATUS_NOT_FOUND}" --color RED
                        AddHP 0 1
                fi
        fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
      # Test        : CUST-0600
    # Description : Verifying if there is maxlogins in /etc/security/limits.conf or/and maxsessions in /etc/ssh/sshd_config set
    Register --test-no CUST-0600 --weight L --network NO --category security --description "Verifying for maxlogins in /etc/security/limits.conf and maxsessions in /etc/ssh/sshd_config"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric UC.7: Concurrent session control: concurrent sessions can be controlled through number limits for every user per interface"
        # LogText "Test: Verifying for maxlogins and maxsessions set"
        FIND=$(${GREPBINARY} -i maxsessions /etc/ssh/sshd_config | ${AWKBINARY} -F '' '$2 ~ /^[0-9]+$/ {print $2}')
        FIND2=$(${GREPBINARY} -i maxlogins /etc/security/limits.conf | ${AWKBINARY} -F '' '$2 ~ /^[0-9]+$/ {print $2}')
        if [ "${FIND}" != "" ]; then
            LogText "Result UC.7: Concurrent session control is set up due to MaxSessions configured in /etc/ssh/sshd_config OK"
                        Display --indent 2 --text "+ Verifying UC.7 Concurrent session control is set up" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                else
                        LogText "Result UC.7: Concurrent session control is not set up due to missing MaxSessions in /etc/ssh/sshd_config - NOT FOUND"
                        Display --indent 2 --text "+ Verifying UC.7 Concurrent session control is set up" --result "${STATUS_NOT_FOUND}" --color RED
                        AddHP 0 1
                fi
                if [ "${FIND2}" != "" ]; then
                        LogText "Result UC.7: Concurrent session control is set up due to MaxLogins configured in /etc/security/limits.conf - OK"
                        Display --indent 2 --text "+ Verifying UC.7 concurrent session control is set up due to MaxLogin configured" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                else
                        LogText "Result UC.7: Concurrent session control is set up due to missing MaxLogins in /etc/security/limits.conf - NOT FOUND"
                        Display --indent 2 --text "+ Verifying UC.7 concurrent session control is set up due to MaxLogin configured" --result "${STATUS_NOT_FOUND}" --color RED
                        AddHP 0 1
                fi
        fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
       # Test        : CUST-0610
    # Description : Verifying if auditd is running
        if [ -n "${AUDITDBINARY}" ]; then PREQS_MET="YES"; else PREQS_MET="NO"; fi
    Register --test-no CUST-0610 --weight L --network NO --category security --description "Verifying for auditd"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric UC.8: Auditable events: audit entries consisting of timestamp, source, category, type, event ID and event result are written"
        # LogText "Test: Verifying auditd"
        IsRunning auditd
        if [ ${RUNNING} -eq 1 ]; then
            LogText "Result UC.8: auditd running - ENABLED"
            Display --indent 2 --text "+ Verifying UC.8: Auditable events: auditd" --result "${STATUS_ENABLED}" --color GREEN
            LINUX_AUDITD_RUNNING=1
            AUDIT_DAEMON_RUNNING=1
            Report "audit_trail_tool[]=auditd"
            Report "linux_auditd_running=1"
            AddHP 1 1
        else
            LogText "Result UC.8: auditd not active - NOT FOUND"
            Display --indent 2 --text "+ Verifying UC.8: Auditable events:auditd" --result "${STATUS_NOT_FOUND}" --color WHITE
            if [ ! "${VMTYPE}" = "openvz" ]; then
                ReportSuggestion ${TEST_NO} "Enable auditd to collect audit information"
            fi
            AddHP 0 1
            Report "linux_auditd_running=0"
        fi
        fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
          # Test        : CUST-0620
    # Description : Verifying if there is enough space for audit log files in the file system
    Register --test-no CUST-0620 --weight L --network NO --category security --description "Verifying for enough free space for audit logs"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric: UC.9: Audit storage capacity; enough storage capacity is given for audit records according to best practices for logs and system configuration"
        # LogText "Test: Verifying for enough free space"
        FIND=$(df -h /var/log | ${SEDBINARY} 1d | ${AWKBINARY} -F ' ' '{print $5}' | ${SEDBINARY} 's/%//')
        if [ "${FIND}" -lt 90 ]; then
                        LogText "Result UC.9: It is enough space available for audit log generation - OK"
                        Display --indent 2 --text "+ Verifying UC.9 Audit storage capacity; is enough space for audit logs" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                else
                        LogText "Result UC.9: There is not enough space available for audit log generation - NOT FOUND"
                        Display --indent 2 --text "+ Verifying UC.9 Audit storage capacity; there is enough space for audit logs" --result "${STATUS_NOT_FOUND}" --color RED
                        AddHP 0 1
                fi
        fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
        # Test        : CUST-0630
    # Description : Verifying if the audit failure flag is configured properly in case of audit processing failures
        FIND=$(${GREPBINARY} -i "config_audit=1" /boot/config.txt)
        if [ "${FIND}" != "" ]; then PREQS_MET="YES"; else PREQS_MET="NO"; fi
        Register --test-no CUST-0630 --preqs-met ${PREQS_MET} --weight L --network NO --category security --description "Verifying for audit failure flag configuration"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric UC.10: Response to audit processing failures: in case of an audit processing failure, users are alerted, and measures are taken for the protection of services and for responding to the error according to industry’s best practices"
        # LogText "Test: Verifying audit failure flag"
                FIND2=$(${AUDITCTLBINARY} -s | ${CUTBINARY} -d " " -f3 | ${SEDBINARY} 's/^flag=//')
                if [ "${FIND2}" -gt 0]; then
                        LogText "Result UC.10: Audit failure flag is set up properly - OK"
                        Display --indent 2 --text "+ Verifying UC.10 Response to audit processing failures: the audit failure flag is set properly" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                else
                        LogText "Result UC.10: Audit failure flag is not set up properly - WARNING"
                        Display --indent 2 --text "+ Verifying UC.10 Response to audit processing failures: the audit failure flag is not set properly" --result "${STATUS_WARNING}" --color YELLOW
                        AddHP 0 1
                fi
        fi
#
#---------------------------------------------------------------------------------------------------------------------------------------
#
        # Test        : CUST-0640
    # Description : Verifying if there are timestamps in /var/log/audit/audit.log
    Register --test-no CUST-0640 --weight L --network NO --category security --description "Verifying for timestamps in audit.log"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric UC.11: Time Stamps: the audit log files have timestamps added"
        # LogText "Test: Verifying timestamps"
        if [ -f "/var/log/audit/audit.log"  ]; then
                FIND=$(${GREPBINARY} -i "msg=audit" /var/log/audit/audit.log | tail -1 | ${CUTBINARY} -d " " -f2 | ${SEDBINARY} 's/^msg=audit(//' | ${CUTBINARY} -c -1 | ${EGREPBINARY} "^[0-9]+$" )
                if [ "${FIND}" != "" ]; then
                        LogText "Result UC.11: Timestamps found in /var/log/audit/audit.log - OK"
                        Display --indent 2 --text "+ Verifying UC.11 Time Stamps: there are timestamps for audit.log" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                else
                        LogText "Result UC.11: Timestamps not found in /var/log/audit/audit.log - WARNING"
                        Display --indent 2 --text "+ Verifying UC.11 Time Stamps: there are timestamps for audit.log" --result "${STATUS_WARNING}" --color YELLOW
                        AddHP 0 1
                fi
        else
                LogText "Result UC.11: No /var/log/audit/audit.log file found - WARNING"
                        Display --indent 2 --text "+ Verifying UC.11 Time Stamps: No /var/log/audit/audit.log file found" --result "${STATUS_WARNING}" --color YELLOW
                        AddHP 0 1
        fi
        fi

#
#---------------------------------------------------------------------------------------------------------------------------------------
#
        # Test        : CUST-0650
    # Description : Verifying if there is gnupg installed for non-repudiation
    Register --test-no CUST-0650 --weight L --network NO --category security --description "gnupg package"
    if [ ${SKIPTEST} -eq 0 ]; then
        LogText "Metric UC.12: Non-repudiation: a concerning human user has done a specific action"
        # LogText "Test Verifying if gnupg is installed"
                if ! [ -x "$(command -v gnupg)" ]; then
                        LogText "Result UC.12: gnupg is not installed - NOT FOUND"
                        Display --indent 2 --text "+ Verifying UC.12 Non-repudiation: is gnupg installed" --result "${STATUS_NOT_FOUND}" --color YELLOW
                        AddHP 0 1
                else
                        LogText "Result UC.12: gnupg is installed - OK"
                        Display --indent 2 --text "+ Verifying UC.12: Non-repudiation: is gnupg installed" --result "${STATUS_OK}" --color GREEN
                        AddHP 1 1
                fi
        fi
    fi
